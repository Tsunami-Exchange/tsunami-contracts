  {-# STDLIB_VERSION 5 #-}
  {-# CONTENT_TYPE DAPP #-}
  {-# SCRIPT_TYPE ACCOUNT #-}

  ##### Key constants #####
  let k_totalSupply = "k_totalSupply"
  let k_rewardBalance = "k_rewardBalance"

  # Global staking
  let k_lastUpdateTime = "k_lastUpdateTime"
  let k_rewardPerTokenStored = "k_rewardPerTokenStored"
  let k_rewardRate = "k_rewardRate"
  let k_periodFinish = "k_periodFinish"

  # Staked balance of user
  let k_balance = "k_balance"
  let k_userRewardPerToken = "k_userRewardPerToken"
  let k_userReward = "k_userReward"

  ##### Updateable (environment) constants #####
  let ADMIN_ADDRESS = Address(base58'3MseEJNEHkYhvcHre6Mann1F8e27S1qptdg')
  let ADMIN_PUBLIC_KEY = base58'A6ZtwikNTr19YpC1t6HnNGCBJF6GTx62DhEkJpgpzpmL'
  let USDN  = base58'HezsdQuRDtzksAYUy97gfhKy7Z1NW2uXYSHA3bgqenNZ'
  let TSN   = base58'HezsdQuRDtzksAYUy97gfhKy7Z1NW2uXYSHA3bgqenNY'


  ##### Core constants #####

  let DECIMAL_UNIT = 1 * (10 * 10 * 10 * 10 * 10 * 10)
  let DURATION = 60 * 60 * 24 # 1 day
  let NO_ADDDRESS = ""
  let NO_STAKER = 0

  ##### Helper functions #####

  func divd(_x: Int, _y: Int) = fraction(_x, DECIMAL_UNIT, _y, HALFEVEN)
  func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMAL_UNIT, HALFEVEN)
  func abs(_x: Int) = if (_x > 0) then _x else -_x
  func minv(_x: Int, _y: Int) = if (_x > _y) then _y else _x
  func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

  ##### Accessor functions #####
  func int(k: String) = this.getInteger(k).valueOrErrorMessage("no value for " + k)
  func int0(k: String) = this.getInteger(k).valueOrElse(0)

  func totalSupply() = int0(k_totalSupply)
  func rewardPerTokenStored() = int0(k_rewardPerTokenStored)
  func lastUpdateTime() = int0(k_lastUpdateTime)
  func rewardRate() = int0(k_rewardRate)
  func periodFinish() = int0(k_periodFinish)
  func rewardBalance() = int0(k_rewardBalance)

  func rewards(_staker: String) = int0(k_userReward.toCompositeKey(_staker))
  func userRewardPerTokenPaid(_staker: String) = int0(k_userRewardPerToken.toCompositeKey(_staker))
  func balanceOf(_staker: String) = int0(k_balance.toCompositeKey(_staker))

  ##### Update functions #####
  func updateRewardBalance(_delta: Int) = {
    [
      IntegerEntry(k_rewardBalance, rewardBalance() + _delta)
    ]
  }

  func updateRewardRate(_rewardRate: Int) = {
    [
      IntegerEntry(k_rewardRate, _rewardRate)
    ]
  }

  func updateTime(
    _lastUpdateTime: Int,
    _periodFinish: Int
  ) = {
    [
      IntegerEntry(k_lastUpdateTime, _lastUpdateTime),
      IntegerEntry(k_periodFinish, _periodFinish)
    ]
  }

  func updateRewardPerTokenStored(_rewardPerTokenStored: Int) = {
    [
      IntegerEntry(k_rewardPerTokenStored, _rewardPerTokenStored)
    ]
  }

  func updateUserRewards(
    _staker: String,
    _reward: Int,
    _userRewardPerToken: Int
  ) = {
    [
      IntegerEntry(k_userReward.toCompositeKey(_staker), _reward),
      IntegerEntry(k_userRewardPerToken.toCompositeKey(_staker), _userRewardPerToken)
    ]
  }

  func updateBalance(
    _staker: String,
    _delta: Int
  ) = {
    [
      IntegerEntry(k_balance.toCompositeKey(_staker), balanceOf(_staker) + _delta),
      IntegerEntry(k_totalSupply, totalSupply() + _delta)
    ]
  }

  ##### View functions #####
  func currentTimestampSec() = lastBlock.timestamp / 1000

  func lastTimeRewardApplicable() = {
    minv(currentTimestampSec(), periodFinish())
  }

  func rewardPerToken(_balanceDelta: Int) = {
    if (totalSupply() + _balanceDelta == 0) then {
      rewardPerTokenStored()
    } else {
      let timeInterval = lastTimeRewardApplicable() - lastUpdateTime()
      let actualTimeInteval = if (timeInterval < 0) then 0 else timeInterval
      let diff = divd(rewardRate(), totalSupply() + _balanceDelta) * actualTimeInteval
      rewardPerTokenStored() + diff
    }
  }

  ##### Callable functions #####

  func earned(_staker: String, _balanceDelta: Int) = {
    let rewardDelta = rewardPerToken(_balanceDelta) - userRewardPerTokenPaid(_staker)
    muld((balanceOf(_staker) + _balanceDelta), rewardDelta) + rewards(_staker)
  }

  func updateReward(_staker: String, _balanceDelta: Int) = {
    let newRewardPerTokenStored = rewardPerToken(_balanceDelta)
    let newLastUpdateTime = currentTimestampSec()
    let (stakerEarned, stakerRewardPerTokenPaid) = if (_staker != "") then {
      (
        earned(_staker, _balanceDelta),
        newRewardPerTokenStored
      )
    } else {
      (0, 0)
    }

    (
      newRewardPerTokenStored,
      newLastUpdateTime,
      stakerEarned,
      stakerRewardPerTokenPaid
    )
  }

  @Callable(i)
  func stake() = {
    let _staker = i.caller.toString()
    let _amount = i.payments[0].amount
    if (i.payments[0].assetId != TSN) then {
      throw("Invalid staking asset")
    } else {
        let (
          newRewardPerTokenStored,
          newLastUpdateTime,
          stakerEarned,
          stakerRewardPerTokenPaid
        ) = updateReward(_staker, 0)

        updateUserRewards(_staker, stakerEarned, stakerRewardPerTokenPaid)
        ++
        updateRewardPerTokenStored(newRewardPerTokenStored)
        ++
        updateTime(newLastUpdateTime, periodFinish())
        ++
        updateBalance(_staker, _amount)
    }
  }

  @Callable(i)
  func unStake(_amount: Int) = {
    let _staker = i.caller.toString()
    if (
      _amount > balanceOf(_staker)
      || i.payments != []
    ) then {
      throw("Invalid unStake parametetrs")
    } else {
        let (
          newRewardPerTokenStored,
          newLastUpdateTime,
          stakerEarned,
          stakerRewardPerTokenPaid
        ) = updateReward(_staker, 0)

        updateUserRewards(_staker, stakerEarned, stakerRewardPerTokenPaid)
        ++
        updateRewardPerTokenStored(newRewardPerTokenStored)
        ++
        updateTime(newLastUpdateTime, periodFinish())
        ++
        updateBalance(_staker, -_amount)
        ++
        [
          ScriptTransfer(i.caller, _amount, TSN)
        ]
    }
  }

  # Claim my reward
  @Callable(i)
  func withdrawRewards() = {
    let _staker = i.caller.toString()
    let (
      newRewardPerTokenStored,
      newLastUpdateTime,
      stakerEarned,
      stakerRewardPerTokenPaid
    ) = updateReward(_staker, 0)
    if (stakerEarned <= 0) then {
      throw("No reward")
    } else {
      updateUserRewards(_staker, 0, stakerRewardPerTokenPaid)
      ++
      updateRewardPerTokenStored(newRewardPerTokenStored)
      ++
      updateTime(newLastUpdateTime, periodFinish())
      ++
      updateRewardBalance(-stakerEarned)
      ++
      [
        ScriptTransfer(i.caller, stakerEarned, USDN)
      ]
    }
  }

  # New rewards added to contract
  @Callable(i)
  func addRewards() = {
    if (i.payments[0].assetId != USDN) then {
      throw("Invaliid addRewards params")
    } else {
      let _reward = i.payments[0].amount
      # assume DURATION = 1 day, (existing) rewardRate = 1, and new incoming _reward = 2
      let newRewardPerTokenStored = updateReward(NO_ADDDRESS, NO_STAKER)._1

      let timestamp = currentTimestampSec()
      let newRewardRate = if (timestamp > periodFinish()) then {
        # there is no reward during the interval after the end of the previous period and before new rewards arrive
        # rewardRate = 2/1 = 2
        _reward / DURATION
      } else {
        let remainingTime = periodFinish() - timestamp
        let leftover = rewardRate() * remainingTime
        (_reward + leftover) / DURATION
      }
      
      updateRewardRate(newRewardRate)
      ++
      updateRewardPerTokenStored(newRewardPerTokenStored)
      ++
      updateRewardBalance(_reward)
      ++
      updateTime(
        timestamp,
        timestamp + DURATION
      )
    }
  }

  @Callable(i)
  func ackRewards() = {
    let currentBalance = assetBalance(this, USDN)
    let rewardBalancee = rewardBalance()
    let rewardDelta = currentBalance - rewardBalancee
    if (rewardDelta <= 0) then {
      throw("Invaliid ackRewards params")
    } else {
      let _reward = rewardDelta
      # assume DURATION = 1 day, (existing) rewardRate = 1, and new incoming _reward = 2
      let newRewardPerTokenStored = updateReward(NO_ADDDRESS, NO_STAKER)._1

      let timestamp = currentTimestampSec()
      let newRewardRate = if (timestamp > periodFinish()) then {
        # there is no reward during the interval after the end of the previous period and before new rewards arrive
        # rewardRate = 2/1 = 2
        _reward / DURATION
      } else {
        let remainingTime = periodFinish() - timestamp
        let leftover = rewardRate() * remainingTime
        (_reward + leftover) / DURATION
      }
      
      updateRewardRate(newRewardRate)
      ++
      updateRewardPerTokenStored(newRewardPerTokenStored)
      ++
      updateRewardBalance(_reward)
      ++
      updateTime(
        timestamp,
        timestamp + DURATION
      )
    }
  }

  @Callable(i)
  func view_reward(_staker: String) = {
      let stakerEarned = updateReward(_staker, 0)._3
      throw(stakerEarned.toString())
  }

  @Verifier(tx)
  func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], ADMIN_PUBLIC_KEY)
          