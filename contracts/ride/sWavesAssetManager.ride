# This is an Fund Manager contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

let k_funds = "k_funds" # Amount of funds in a given token
let k_sWavesAddress = "k_sWavesAddress" # Address of sWaves staking contract
let k_sWavesAsset = "k_sWavesAsset" # Asset of sWaves

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress" # Address of Coordinator (base contract that keeps references to all infrastructure)
let k_manager_address = "k_manager_address"       # Manager contract address
let k_admin_address = "k_admin_address"           # Address of admin account           

# Global initialization state
let k_initialized = "k_initialized"               # If Insurance was properly initialized

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func balanceOf(_assetId: String) = this.getInteger(toCompositeKey(k_funds, _assetId)).valueOrElse(0)
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set Simple Asset Manager")
func managerAddress() = addressFromString(coordinator().getString(k_manager_address).valueOrErrorMessage("Manager not set")).valueOrErrorMessage("Manager not set") 
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))

func sWavesAddress() = addressFromStringValue(this.getStringValue(k_sWavesAddress))
func sWavesAsset() = fromBase58String(this.getStringValue(k_sWavesAsset))

let WAVES_TO_S_WAVES_PRECISION = "10000".parseBigIntValue()
let S_WAVES_PRECISION          = "1000000000000".parseBigIntValue()

func isWhitelist(_address: String) = {
  _address == managerAddress().toString()
}

func updateFunds(_assetId: String, _value: Int) = {
  [
    IntegerEntry(toCompositeKey(k_funds, _assetId), _value)
  ]
}

func strAssetId(_asset: ByteVector | Unit) = {
  if (_asset.isDefined()) then toBase58String(_asset.value()) else "WAVES"
}

func wavesToSWaves(_waves: Int) = {
  strict rateR = invoke(sWavesAddress(), "getRate", [], [])
  strict rate = match(rateR) {
    case x: String => parseBigIntValue(x)
    case _ => throw("Invalid getRate result")
  }
  
  # _waves is in 8 decimals, rate is in 12 decimal, so adjust waves first
  #
  let desiredWaves = _waves.toBigInt() * WAVES_TO_S_WAVES_PRECISION
  
  # now div desired waves to the rate and round down from 12 decimals to 8 decimals
  let sWavesAmount = (fraction(desiredWaves, S_WAVES_PRECISION, rate, CEILING) / WAVES_TO_S_WAVES_PRECISION).toInt() + 1

  sWavesAmount
}

func extractProfit() = {
  strict sWavesAmount = assetBalance(this, sWavesAsset())
    strict doWithdraw = invoke(sWavesAddress(), "withdraw", [], [AttachedPayment(
      sWavesAsset(),
      sWavesAmount
    )])

    strict wavesActualBalance = wavesBalance(this).regular
    strict accountingBalance = balanceOf("WAVES")

    strict doVerifyBalance = if (wavesActualBalance < accountingBalance) then {
      throw("Invalid state: wavesActualBalance < accountingBalance")
    } else {
      unit
    }

    strict profit = wavesActualBalance - accountingBalance
    strict doDeposit = invoke(sWavesAddress(), "deposit", [], [AttachedPayment(
      unit,
      accountingBalance
    )])

    profit
}

@Callable(i)
func initialize(
  _coordinator: String,
  _sWavesAddress: String
) = {
  if (initialized() || i.caller != this) then {
    throw("Unable to initialize")
  } else {
    let sWaves = addressFromStringValue(_sWavesAddress)
    let sWavesAssetValue = sWaves.getString("ASSET").valueOrErrorMessage("No sWaves Asset")
    [
      StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString()),
      StringEntry(k_sWavesAddress, sWaves.toString()),
      StringEntry(k_sWavesAsset, sWavesAssetValue),
      BooleanEntry(k_initialized, true)
    ]
  }
}

@Callable(i)
func withdraw(_assetId: String, _amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || !initialized()
    || _amount > balanceOf(_assetId)
  ) then {
    throw("Invalid withdraw params (simple asset manager) " + _amount.toString() + " > " + balanceOf(_assetId).toString())
  } else {
    let currentAssetBalance = balanceOf(_assetId) - _amount
    strict sWavesAmount = wavesToSWaves(_amount)

    strict doWithdraw = invoke(sWavesAddress(), "withdraw", [], [AttachedPayment(
      sWavesAsset(),
      sWavesAmount
    )])

    # Update state + transfer
    updateFunds(_assetId, currentAssetBalance)
    ++
    [
      ScriptTransfer(i.caller, _amount, if (_assetId == "WAVES") then unit else fromBase58String(_assetId))
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  let _assetId = strAssetId(i.payments[0].assetId)
  if (
    !initialized()
    || (!isWhitelist(i.caller.toString()) && i.caller != adminAddress())
  ) then {
    throw("Invalid deposit params (simple asset manager)")
  } else {
    strict doDeposit = invoke(sWavesAddress(), "deposit", [], [i.payments[0]])

    let currentAssetBalance = balanceOf(_assetId) + _amount

    updateFunds(_assetId, currentAssetBalance)
  }
}

@Callable(i)
func claimProfit(_assetId: String) = {
  if (
    !initialized()
    || i.caller != managerAddress()
  ) then {
    throw("Invalid claimProfit params (sWaves asset manager)")
  } else {    
    strict profit = extractProfit()
    ([
      ScriptTransfer(i.caller, profit, if (_assetId == "WAVES") then unit else fromBase58String(_assetId))
    ], profit)
  }
}

@Callable(i)
func view_claimProfit(_assetId: String) = {
  if (
    !initialized()
  ) then {
    throw("Invalid view_claimProfit params (sWaves asset manager)")
  } else {
    strict profit = extractProfit()
    throw(balanceOf(_assetId).toString() + "," + balanceOf(_assetId).toString() + "," + profit.toString())
  }
}
   
@Verifier(tx)
func verify() = {
  let coordinatorStr = this.getString(k_coordinatorAddress)
  if (coordinatorStr.isDefined()) then {
    let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
    if (admin.isDefined()) then {
      admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
    } else { 
      # Admin is not defined in coordinator, set admin first
      throw("unable to verify: admin not set in coordinator")
    }
  } else {
    # Coordinator not set, use native verify
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}