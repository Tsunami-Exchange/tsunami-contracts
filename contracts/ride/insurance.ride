# This is an Insurance Fund contract
#
{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

# Insurance funds
let k_insurance = "k_insurance" # Amount of funds in insurance fund

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress" # Address of Coordinator (base contract that keeps references to all infrastructure)
let k_amm = "k_amm"                               # Marks valid AMM addresses (for insurance)
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_admin_public_key = "k_admin_public_key"     # Pubic key of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset (USDN in our case)
let k_quote_staking = "k_quote_staking"           # Address of quote asset staking contract (USDN staking in our case)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits

# Global initialization state
let k_initialized = "k_initialized"               # If Insurance was properly initialized

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func insurance() = this.getInteger(k_insurance).valueOrElse(0)
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
func isWhitelist(_address: String) = getBoolean(coordinator(), k_amm.toCompositeKey(_address)).valueOrElse(false)
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
func adminPublicKey() = fromBase58String(coordinator().getStringValue(k_admin_public_key))
func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
func quoteAssetStaking() = addressFromString(coordinator().getStringValue(k_quote_staking)).valueOrErrorMessage("Quote asset staking not set")
func stakingAddress() = addressFromString(coordinator().getStringValue(k_staking_address)).valueOrErrorMessage("Insurance not set")

##### Internal functions #####
func updateInsurance(i: Int) = {
  [
    IntegerEntry(k_insurance, i)
  ]
}

@Callable(i)
func initialize(
  _coordinator: String
) = {
  if (initialized()) then {
    throw("Already initialized")
  } else {
    [
      StringEntry(k_coordinatorAddress, _coordinator),
      BooleanEntry(k_initialized, true)
    ]
  }
}

@Callable(i)
func withdraw(_amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || !initialized()
    || _amount > insurance()
  ) then {
    throw("Invalid withdraw params " + _amount.toString() + " > " + insurance().toString())
  } else {
    strict unstake = invoke(
      quoteAssetStaking(),
      "unlockNeutrino",
      [_amount, quoteAsset().toBase58String()],
      []
    )

    # Update state + transfer
    updateInsurance(insurance() - _amount)
    ++
    [
      ScriptTransfer(i.caller, _amount, quoteAsset())
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  if (
    i.payments[0].assetId != quoteAsset()
    || !initialized()
    || (!isWhitelist(i.caller.toString()) && i.caller != adminAddress())
  ) then {
    throw("Invalid deposit params")
  } else {
    strict stake = invoke(
      quoteAssetStaking(),
      "lockNeutrino",
      [],
      [AttachedPayment(quoteAsset(), _amount)]
    )

    updateInsurance(insurance() + _amount)
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey())