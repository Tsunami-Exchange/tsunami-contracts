# This is an Insurance Fund contract
#
{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

# Insurance funds
let k_insurance = "k_insurance"
let k_whitelistt = "k_whitelist"

##### Updateable (environment) constants #####
let ADMIN_ADDRESS = Address(base58'3MseEJNEHkYhvcHre6Mann1F8e27S1qptdg')
let ADMIN_PUBLIC_KEY = base58'A6ZtwikNTr19YpC1t6HnNGCBJF6GTx62DhEkJpgpzpmL'
let USDN = base58'HezsdQuRDtzksAYUy97gfhKy7Z1NW2uXYSHA3bgqenNZ'
let USDN_STAKING = Address(base58'3N9LkJahTMx41wGhSxLS42prCZtRCp4dhTs')

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func insurance() = this.getInteger(k_insurance).valueOrElse(0)
func isWhitelist(_address: String) = getBoolean(this, k_whitelistt.toCompositeKey(_address)).valueOrElse(false)

##### Internal functions #####
func updateInsurance(i: Int) = {
  [
    IntegerEntry(k_insurance, i)
  ]
}

@Callable(i)
func addWhitelist(_addresss: String) = {
  if (
    i.caller != ADMIN_ADDRESS
  ) then {
    throw("Invalid addWhitelist params")
  } else {
    [
      BooleanEntry(k_whitelistt.toCompositeKey(_addresss), true)
    ]
  }
}

@Callable(i)
func removeWhitelist(_addresss: String) = {
  if (
    i.caller != ADMIN_ADDRESS
  ) then {
    throw("Invalid addWhitelist params")
  } else {
    [
      BooleanEntry(k_whitelistt.toCompositeKey(_addresss), false)
    ]
  }
}

@Callable(i)
func withdraw(_amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || _amount > insurance()
  ) then {
    throw("Invalid withdraw params")
  } else {
    strict unstake = invoke(
      USDN_STAKING,
      "unlockNeutrino",
      [_amount, USDN.toBase58String()],
      []
    )

    # Update state + transfer
    updateInsurance(insurance() - _amount)
    ++
    [
      ScriptTransfer(i.caller, _amount, USDN)
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  if (
    i.payments[0].assetId != USDN
    || (!isWhitelist(i.caller.toString()) && i.caller != ADMIN_ADDRESS)
  ) then {
    throw("Invalid deposit params")
  } else {
    strict stake = invoke(
      USDN_STAKING,
      "lockNeutrino",
      [],
      [AttachedPayment(USDN, _amount)]
    )

    updateInsurance(insurance() + _amount)
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], ADMIN_PUBLIC_KEY)
        