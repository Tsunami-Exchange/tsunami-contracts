# This is a vAMM + Exchange contract
#
{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

# Oracle keys
let k_ora_key = "k_ora_key" # Key in Index Price Oracle account to read price from
let k_ora = "k_ora"         # Address of Index Price oracle account

# AMM Balance
let k_balance = "k_balance" # How much of a trader's funds is controlled by this AMM

# Trader Position   
let k_positionSize = "k_positionSize"                 # Trader position size (base asset)
let k_positionMargin = "k_positionMargin"             # Trader position margin (quote asset) - how much quote asset is supporting the position
let k_positionOpenNotional = "k_positionOpenNotional" # Trader position open notional - how much quote asset they have borrowed
let k_positionLastUpdatedCumulativePremiumFraction = "k_positionFraction"        # Trader position last updated commulutive premium fraction

# Global initialization state
let k_initialized = "k_initialized"                       # If AMM was properly initialized
let k_paused = "k_paused"

# Exchange settings
let k_fee = "k_fee"                                       # Exchange fee. Default is 1%. 1/2 goes to stakers, 1/2 goes to insurance fund
let k_fundingPeriod = "k_fundingPeriod"                   # Funding period. By default funding is paid once per hour
let k_initMarginRatio = "k_initMarginRatio"               # Initial margin ratio. Controls how much leverage can be applied when position is created
let k_maintenanceMarginRatio = "k_mmr"                    # Maintenance margin ratio (MMR). When MR < MMR position can be luquidated
let k_liquidationFeeRatio = "k_liquidationFeeRatio"       # % of position size liquidator will get for himself. 1/2 of this goes to luqiidator, 1/2 - to insurance fund
let k_spreadLimit = "k_spreadLimit"                       # abs((marketPrice - oraclePrice) / oraclePrice). If over spread limit, liquidations consult oracle price
let k_maxPriceImpact = "k_maxPriceImpact"                 # maximum price impact per order

# TWAP data
let k_lastDataStr = "k_lastDataStr"
let k_lastMinuteId = "k_lastMinuteId"
let k_twapDataLastCumulativePrice = "k_twapDataLastCumulativePrice"
let k_twapDataLastPrice = "k_twapDataLastPrice"
let k_twap = "k_twap"

# Funding state
let k_latestLongCumulativePremiumFraction = "k_latestLongPremiumFraction" # Latst 小ommulitive Permium Fraction. (Part of Premium paid this fundnig period). Premium = MarkProce - IndexPrice
let k_latestShortCumulativePremiumFraction = "k_latestShortPremiumFraction" # Latst 小ommulitive Permium Fraction. (Part of Premium paid this fundnig period). Premium = MarkProce - IndexPrice
let k_nextFundingBlock = "k_nextFundingBlockMinTimestamp"         # Timestamp of Next block when funding becomes avialible
let k_longFundingRate = "k_longFundingRate"                       # Funding rate  小ommulitive Permium Fraction / Index Price
let k_shortFundingRate = "k_shortFundingRate"                     # Funding rate  小ommulitive Permium Fraction / Index Price

# AMM State
let k_quoteAssetReserve = "k_qtAstR"                      # Quote Asset Reserve (AMM)
let k_baseAssetReserve = "k_bsAstR"                       # Base Asset Reserve (AMM)
let k_totalPositionSize = "k_totalPositionSize"           # Total trader position size (in Base asset)
let k_totalLongPositionSize = "k_totalLongPositionSize"   # Total LONG trader position size (in Base asset)
let k_totalShortPositionSize = "k_totalShortPositionSize" # Total SHORT trader position size (in Base asset)
let k_cumulativeNotional = "k_cumulativeNotional"         # Cumulatiev Notiinal (all positions)
let k_openInteresetNotional = "k_openInteresetNotional"   # Open Interest Notional (all positions)

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress"         # Address of Coordinator (base contract that keeps refereences to all infrastructure)

# Coordinator keys
let k_insurance_address = "k_insurance_address"   # Address of insurance contractt
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_admin_public_key = "k_admin_public_key"     # Pubic key of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset (USDN in our case)
let k_quote_staking = "k_quote_staking"           # Address of quote asset staking contract (USDN staking in our case)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits

##### Updateable (environment) constants ##### 
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
func adminPublicKey() = fromBase58String(coordinator().getStringValue(k_admin_public_key))
func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
func quoteAssetStaking() = addressFromString(coordinator().getStringValue(k_quote_staking)).valueOrErrorMessage("Quote assete staking not set")
func stakingAddress() = addressFromString(coordinator().getStringValue(k_staking_address)).valueOrErrorMessage("Insurance not set")
func insuranceAddress() = addressFromString(coordinator().getStringValue(k_insurance_address)).valueOrErrorMessage("Insurance not set")

##### Core constants #####

let DIR_LONG                = 1
let DIR_SHORT               = 2
let FUNDING_BLOCK_INTERVAL  = 60
let TWAP_INTERVAL = 15

let SECONDS = 1000
let DECIMAL_UNIT = 1 * (10 * 10 * 10 * 10 * 10 * 10)
let ONE_DAY = 86400 * DECIMAL_UNIT
let ALL_FEES = 100
let PNL_OPTION_SPOT = 1
let PNL_OPTION_ORACLE = 2

##### Helper functions #####

func s(_x: Int) = _x.toString() + ","

func divd(_x: Int, _y: Int) = fraction(_x, DECIMAL_UNIT, _y, HALFEVEN)
func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMAL_UNIT, HALFEVEN)
func abs(_x: Int) = if (_x > 0) then _x else -_x

func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

##### Validator functions #####

func requireMoreMarginRatio(_marginRatio: Int, _baseMarginRatio: Int, _largerThanOrEqualTo: Boolean) = {
  let remainingMarginRatio = _marginRatio - _baseMarginRatio
  if (_largerThanOrEqualTo && remainingMarginRatio < 0) then {
    throw("Invalid margin")
  } else {
    if (!_largerThanOrEqualTo && remainingMarginRatio >= 0) then {
      throw("Invalid margin")
    } else {
      true
    }
  }
}

##### Accessor functions #####
func int(k: String) = this.getInteger(k).valueOrErrorMessage("no value for " + k)

func cbalance() = int(k_balance)
func fee() = int(k_fee)
func initMarginRatio() = int(k_initMarginRatio)
func qtAstR() = int(k_quoteAssetReserve)
func bsAstR() = int(k_baseAssetReserve)
func totalPositionSize() = int(k_totalPositionSize)
func cumulativeNotional() = int(k_cumulativeNotional)
func openInteresetNotional() = int(k_openInteresetNotional)
func nextFundingBlockTimestamp() = int(k_nextFundingBlock)
func fundingPeriodRaw() = int(k_fundingPeriod)
func fundingPeriodDecimal() = fundingPeriodRaw() * DECIMAL_UNIT
func fundingPeriodSeconds() = fundingPeriodRaw() * SECONDS
func mmr() = int(k_maintenanceMarginRatio)
func liquidationFeeRatio() = int(k_liquidationFeeRatio)
func spreadLimit() = int(k_spreadLimit)
func maxPriceImpact() = int(k_maxPriceImpact)
func latestLongCumulativePremiumFraction() = int(k_latestLongCumulativePremiumFraction)
func latestShortCumulativePremiumFraction() = int(k_latestShortCumulativePremiumFraction)
func totalShortPositionSize() = int(k_totalShortPositionSize)
func totalLongPositionSize() = int(k_totalLongPositionSize)

func latestCPF(
  _positionSize: Int
) = if (_positionSize > 0) 
  then latestLongCumulativePremiumFraction() 
  else latestShortCumulativePremiumFraction()

func getPosition(invesor: String) = {
  let positionSizeOpt = this.getInteger(k_positionSize.toCompositeKey(invesor))
  match (positionSizeOpt) {
      case positionSize: Int => (
        positionSize,
        this.getIntegerValue(k_positionMargin.toCompositeKey(invesor)),
        this.getIntegerValue(k_positionOpenNotional.toCompositeKey(invesor)),
        this.getIntegerValue(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(invesor))
      )
      case _ => (0, 0, 0, 0)
    }
}

func requireOpenPosition(_trader: String) = {
    if (getPosition(_trader)._1 == 0) then {
      throw("No open position")
    } else {
      true
    }
}

func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func paused() = this.getBoolean(k_paused).valueOrElse(false)

##### Internal functions #####
func updateReserve(_isAdd: Boolean, _quoteAssetAmount: Int, _baseAssetAmount: Int) = {
  if (_isAdd) then {
    let newBase = bsAstR() - _baseAssetAmount
    if (newBase <= 0) then {
      throw("Tx lead to base asset reserve <= 0, revert")
    } else {
      (
        qtAstR() + _quoteAssetAmount,
        newBase,
        totalPositionSize() + _baseAssetAmount,
        cumulativeNotional() + _quoteAssetAmount
      )
    }
  } else {
    let newQuote = qtAstR() - _quoteAssetAmount
    if (newQuote <= 0) then {
      throw("Tx lead to base quote reserve <= 0, revert")
    } else {
      (
        newQuote,
        bsAstR() + _baseAssetAmount,
        totalPositionSize() - _baseAssetAmount,
        cumulativeNotional() - _quoteAssetAmount
      )
    }
  }
}

func swapInput(_isAdd: Boolean, _quoteAssetAmount: Int) = {
  let _qtAstR = qtAstR()
  let _bsAstR = bsAstR()
  let priceBefore = divd(_qtAstR, _bsAstR)
  let amountBaseAssetBoughtWithoutPriceImpact = muld(_quoteAssetAmount, priceBefore)
  let k = muld(_qtAstR, _bsAstR)
  let quoteAssetReserveAfter = if (_isAdd) then {
    _qtAstR + _quoteAssetAmount
  } else {
    _qtAstR - _quoteAssetAmount
  }

  let baseAssetReserveAfter = divd(k, quoteAssetReserveAfter)
  let amountBaseAssetBoughtAbs = abs(baseAssetReserveAfter - _bsAstR)
  let amountBaseAssetBought = if (_isAdd) then {
    amountBaseAssetBoughtAbs
  } else {
    -amountBaseAssetBoughtAbs
  }
  
  let priceImpact = (amountBaseAssetBoughtWithoutPriceImpact - amountBaseAssetBoughtAbs) / amountBaseAssetBoughtWithoutPriceImpact
  let maxPriceImpactValue = maxPriceImpact()
  if (priceImpact > maxPriceImpactValue) then {
    throw("Price impact " + priceImpact.toString() + " > max price impact " + maxPriceImpactValue.toString())
  } else {
    let (
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1
    ) = updateReserve(_isAdd, _quoteAssetAmount, amountBaseAssetBoughtAbs)

    (
      amountBaseAssetBought,
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1
    )
  }
}

func calcRemainMarginWithFundingPayment(
  _oldPositionSize: Int, 
  _oldPositionMargin: Int, 
  _oldPositionLstUpdCPF: Int, 
  _marginDelta: Int
) = {
  let _latestCPF = latestCPF(_oldPositionSize)
  let fundingPayment = if (_oldPositionSize != 0) then {
    muld((_latestCPF - _oldPositionLstUpdCPF), _oldPositionSize)
  } else {
    0
  }
  let signedMargin = _marginDelta - fundingPayment + _oldPositionMargin
  let (remainMargin, badDebt) = if (signedMargin < 0) then {
    (0, abs(signedMargin))
  } else {
    (abs(signedMargin), 0)
  }

  (remainMargin, badDebt, fundingPayment, _latestCPF)
}

func swapOutput(
  _isAdd: Boolean, 
  _baseAssetAmount: Int, 
  _quoteAssetPoolAmount: Int, 
  _baseAssetPoolAmount: Int
) = {
  if (_baseAssetAmount == 0) then {
    throw("Invalid base asset amount")
  } else {
    let k = muld(_quoteAssetPoolAmount, _baseAssetPoolAmount)
    let baseAssetPoolAmountAfter = if (_isAdd) then {
      _baseAssetPoolAmount + _baseAssetAmount 
    } else {
      _baseAssetPoolAmount - _baseAssetAmount
    }

    let quoteAssetAfter = divd(k, baseAssetPoolAmountAfter)
    let quoteAssetSold = abs(quoteAssetAfter - _quoteAssetPoolAmount)

    let (
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1
    ) = updateReserve(!_isAdd, quoteAssetSold, _baseAssetAmount)

    (
      quoteAssetSold,
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1,
      totalLongPositionSize()  - if (_isAdd)  then abs(_baseAssetAmount) else 0,
      totalShortPositionSize() - if (!_isAdd) then abs(_baseAssetAmount) else 0
    )
  }
}

func getOracleTwapPrice() = {
  let oracle = addressFromString(this.getStringValue(k_ora)).valueOrErrorMessage("")
  let priceKey = this.getStringValue(k_ora_key)
  oracle.getIntegerValue(priceKey)
}

func getSpotPrice() = {
  let _qtAstR = qtAstR()
  let _bsAstR = bsAstR()
  divd(_qtAstR, _bsAstR)
}

func isOverFluctuationLimit() = {
  let oraclePrice = getOracleTwapPrice()
  let currentPrice = getSpotPrice()
  divd(abs(oraclePrice - currentPrice), oraclePrice) > spreadLimit()
}

func getPositionNotionalAndUnrealizedPnl(_trader: String, _option: Int) = {
  let (
      positionSize,
      positionMargin,
      positionOpenNotional,
      positionLstUpdCPF
    ) = getPosition(_trader)

    let positionSizeAbs = abs(positionSize)
    if  (positionSizeAbs == 0) then {
      throw("Invalid position size")
    } else {
      let isShort = positionSize < 0
      let positionNotional = if (_option == PNL_OPTION_SPOT) then {
        let (outPositionNotional, x1, x2, x3) = swapOutput(
          !isShort,
          positionSizeAbs,
          qtAstR(),
          bsAstR()
        )
        outPositionNotional
      } else {
        positionSizeAbs * getOracleTwapPrice()
      }

      let unrealizedPnl = if (isShort) then {
        positionOpenNotional - positionNotional
      } else {
        positionNotional - positionOpenNotional
      }
      (
        positionNotional,
        unrealizedPnl
      )
    }
}

func getMarginRatioByOption(_trader: String, _option: Int) = {
    func x() = {0}
    let (
      positionSize,
      positionMargin,
      pon,
      positionLstUpdCPF
    ) = getPosition(_trader)

    let (positionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, _option)
    let (remainMargin, badDebt) = calcRemainMarginWithFundingPayment(
        positionSize,
        positionMargin,
        positionLstUpdCPF,
        unrealizedPnl
    )
    divd(remainMargin - badDebt, positionNotional)
}

func getMarginRatio(_trader: String) = getMarginRatioByOption(_trader, PNL_OPTION_SPOT)

func internalClosePosition(_trader: String) = {
    let (
      positionSize,
      positionMargin,
      pon,
      positionLstUpdCPF
    ) = getPosition(_trader)

    let (x1, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, PNL_OPTION_SPOT)
    let (remainMargin, badDebt, x2) = calcRemainMarginWithFundingPayment(
        positionSize, 
        positionMargin, 
        positionLstUpdCPF,
        unrealizedPnl
    )

    let exchangedPositionSize = -positionSize
    let realizedPnl = unrealizedPnl
    let marginToVault = -remainMargin

    let (
      exchangedQuoteAssetAmount, 
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = swapOutput(
        positionSize > 0,
        abs(positionSize),
        qtAstR(),
        bsAstR()
    )
    
    let openInteresetNotionalAfter = openInteresetNotional() - pon
    (
      exchangedPositionSize,
      badDebt,
      realizedPnl,
      marginToVault,
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      exchangedQuoteAssetAmount,
      totalLongAfter,
      totalShortAfter
    )
}

func getTwapSpotPrice() = {
  let minuteId = lastBlock.timestamp / 1000 / 60
  let startMinuteId = minuteId - TWAP_INTERVAL
  let listStr = this.getString(k_lastDataStr).valueOrElse("")
  let list = listStr.split(",")
  func filterFn(accum: List[Int], next: String) = {
    if (next.parseIntValue() <= startMinuteId) then {
      accum :+ next.parseIntValue()
    } else {
      accum
    }
  }
  let listF = FOLD<20>(list, [], filterFn)
  let maxIndex = if (listF.size() > 0) then {
    max(listF)
  } else {
    list.getElement(0).parseIntValue()
  }
  let lastMinuteId = this.getInteger(k_lastMinuteId).valueOrElse(0)
  let endLastCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + lastMinuteId.toString()).valueOrElse(0)
  let endLastPrice = this.getInteger(k_twapDataLastPrice + "_" + lastMinuteId.toString()).valueOrElse(0)
  let nowCummulativePrice = endLastCumulativePrice + (minuteId - lastMinuteId) * endLastPrice
  
  let startLastCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + maxIndex.toString()).valueOrElse(0)
  let startLastPrice = this.getInteger(k_twapDataLastPrice + "_" + maxIndex.toString()).valueOrElse(0)
  let startCummulativePrice = startLastCumulativePrice + (startMinuteId - maxIndex) * startLastPrice
  
  (nowCummulativePrice - startCummulativePrice) / TWAP_INTERVAL
}

func updateSettings(
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fundingPeriod: Int,
  _fee: Int,
  _spreadLimit: Int,
  _maxPriceImpact: Int
) = {
  [
    IntegerEntry(k_initMarginRatio, _initMarginRatio),
    IntegerEntry(k_maintenanceMarginRatio, _mmr),
    IntegerEntry(k_liquidationFeeRatio, _liquidationFeeRatio),
    IntegerEntry(k_fundingPeriod, _fundingPeriod),
    IntegerEntry(k_fee, _fee),
    IntegerEntry(k_spreadLimit, _spreadLimit),
    IntegerEntry(k_maxPriceImpact, _maxPriceImpact)
  ]
}

func updateFunding( 
  _nextFundingBlock: Int,
  _latestLongCumulativePremiumFraction: Int,
  _latestShortCumulativePremiumFraction: Int,
  _longFundingRate: Int,
  _shortFundingRate: Int
) = {
  [
    IntegerEntry(k_nextFundingBlock, _nextFundingBlock),
    IntegerEntry(k_latestLongCumulativePremiumFraction, _latestLongCumulativePremiumFraction),
    IntegerEntry(k_latestShortCumulativePremiumFraction, _latestShortCumulativePremiumFraction),
    IntegerEntry(k_longFundingRate, _longFundingRate),
    IntegerEntry(k_shortFundingRate, _shortFundingRate)
  ]
}

func updatePosition(
  _address: String,
  _size: Int,
  _margin: Int,
  _openNotinal: Int,
  _LstUpdCPF: Int
) = {
  [
    IntegerEntry(k_positionSize.toCompositeKey(_address), _size),
    IntegerEntry(k_positionMargin.toCompositeKey(_address), _margin),
    IntegerEntry(k_positionOpenNotional.toCompositeKey(_address), _openNotinal),
    IntegerEntry(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(_address), _LstUpdCPF)
  ]
}

func appendTwap(price: Int) = {
  let minuteId = lastBlock.timestamp / 1000 / 60
  let previousMinuteId = this.getInteger(k_lastMinuteId).valueOrElse(0)
  if (minuteId < previousMinuteId) then {
    throw("TWAP out-of-order")
  } else {
    let lastMinuteId = if (previousMinuteId == 0) then minuteId else previousMinuteId
    let listStr = this.getString(k_lastDataStr).valueOrElse("")
    let oldList = listStr.split(",")
    let list = if (oldList.size() > TWAP_INTERVAL) then {
      oldList.removeByIndex(0) :+ minuteId.toString()
    } else {
      oldList :+ minuteId.toString()
    }
    let prevCummulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + previousMinuteId.toString()).valueOrElse(0)
    let prevPrice = this.getInteger(k_twapDataLastPrice + "_" + previousMinuteId.toString()).valueOrElse(price)
    let lastCummulativePrice = prevCummulativePrice + (minuteId - lastMinuteId) * prevPrice

    func join(accum: String, val: String) = accum + val + ","
    let newListStr = FOLD<20>(list, "", join)
    let newListStrU = newListStr.dropRight(1)
    let newListStrR = if (newListStrU.take(1) == ",") then newListStrU.drop(1) else newListStrU     
    [
      IntegerEntry(k_twapDataLastCumulativePrice + "_" + minuteId.toString(), lastCummulativePrice),
      IntegerEntry(k_twapDataLastPrice + "_" + minuteId.toString(), price),
      IntegerEntry(k_lastMinuteId, minuteId),
      StringEntry(k_lastDataStr, newListStrR)
    ]
  }
}

func updateAmm(
  _qtAstR: Int,
  _bsAstR: Int,
  _totalPositionSizeAfter: Int,
  _cumulativeNotionalAfter: Int,
  _openInteresetNotional: Int,
  _totalLongPositionSize: Int,
  _totalShortPositionSize: Int
) = {
  if (_totalLongPositionSize - _totalShortPositionSize != _totalPositionSizeAfter) then {
    throw("Invalid AMM state data: " + _totalLongPositionSize.toString() + " +  " + _totalShortPositionSize.toString() + " != " + _totalPositionSizeAfter.toString())
  } else {
    [
      IntegerEntry(k_quoteAssetReserve, _qtAstR),
      IntegerEntry(k_baseAssetReserve, _bsAstR),
      IntegerEntry(k_totalPositionSize, _totalPositionSizeAfter),
      IntegerEntry(k_cumulativeNotional, _cumulativeNotionalAfter),
      IntegerEntry(k_openInteresetNotional, _openInteresetNotional),
      IntegerEntry(k_totalLongPositionSize, _totalLongPositionSize),
      IntegerEntry(k_totalShortPositionSize, _totalShortPositionSize)
    ] ++ appendTwap(divd(_qtAstR, _bsAstR))
  }
}

func deletePosition(
  _address: String
) = {
  [
    DeleteEntry(k_positionSize.toCompositeKey(_address)),
    DeleteEntry(k_positionMargin.toCompositeKey(_address)),
    DeleteEntry(k_positionOpenNotional.toCompositeKey(_address)),
    DeleteEntry(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(_address))
  ]
}

func withdraw(
  _address: Address,
  _amount: Int
) = {
  let balance = assetBalance(this, quoteAsset())
  if (balance < _amount) then {
    throw("Unable to withdraw " + _amount.toString() + " from contract balance " + balance.toString())
  } else {
    [
      ScriptTransfer(_address, _amount, quoteAsset())
    ]
  }
}

#func writeConstants() = {
#  [
#    StringEntry("ADMIN_ADDRESS", ADMIN_ADDRESS.toString()),
#    StringEntry("USDN", USDN.toBase58String()),
#    StringEntry("USDN_STAKING", USDN_STAKING.toString())
#  ]
#}

func updateBalance(i: Int) = {
  if (i < 0) then {
    throw("Balance")
  } else {
    [
      IntegerEntry(k_balance, i)
    ]
  }
}

func transferFee(i: Int) = {
  [
    ScriptTransfer(stakingAddress(), i, quoteAsset())
  ]
}


##### Callable functions #####

@Callable(i)
func pause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid togglePause params")
  } else {
    [
      BooleanEntry(k_paused, true)
    ]
  }
}

@Callable(i)
func unpause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid togglePause params")
  } else {
    [
      BooleanEntry(k_paused, false)
    ]
  }
}

@Callable(i)
func changeSettings(
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fundingPeriod: Int,
  _fee: Int,
  _spreadLimit: Int,
  _maxPriceImpact: Int
) = {
  if (i.caller != adminAddress()) then {
    throw("Invalid changeSettings params")
  } else {
    updateSettings(
      _initMarginRatio, 
      _mmr, 
      _liquidationFeeRatio, 
      _fundingPeriod, 
      _fee, 
      _spreadLimit, 
      _maxPriceImpact
    )
  }
}

@Callable(i)
func initialize(
  _qtAstR: Int,
  _bsAstR: Int,
  _fundingPeriod: Int,
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fee: Int,
  _oracle: String,
  _oracleKey: String,
  _coordinator: String,
  _spreadLimit: Int,
  _maxPriceImpact: Int
) = {
  if (
    _qtAstR <= 0
    || _bsAstR <= 0
    || _fundingPeriod <= 0
    || _initMarginRatio <= 0
    || _mmr <= 0
    || _liquidationFeeRatio <= 0
    || _fee <= 0
    || _spreadLimit <= 0
    || _maxPriceImpact <= 0
    || initialized()
  ) then {
    throw("Invalid initialize parameters")
  } else {
    updateAmm(_qtAstR, _bsAstR, 0, 0, 0, 0, 0)
    ++
    updateSettings(_initMarginRatio, _mmr, _liquidationFeeRatio, _fundingPeriod, _fee, _spreadLimit, _maxPriceImpact)
    ++
    updateFunding(
      lastBlock.timestamp + _fundingPeriod,
      0,
      0,
      0,
      0
    )
    ++
    updateBalance(0)
    ++
    [
      BooleanEntry(k_initialized, true),
      StringEntry(k_ora, _oracle),
      StringEntry(k_ora_key, _oracleKey),
      StringEntry(k_coordinatorAddress, _coordinator)
    ]
  }
}

@Callable(i)
func decreasePosition(
  _direction: Int,
  _amount: Int,
  _leverage: Int,
  _minBaseAssetAmount: Int
) = {
  if (
    (_direction != DIR_LONG && _direction != DIR_SHORT)
    || _amount <= 0
    || (_leverage < 1 * DECIMAL_UNIT || _leverage > 3 * DECIMAL_UNIT)
    || !initialized()
    || !requireMoreMarginRatio(divd(DECIMAL_UNIT, _leverage), initMarginRatio(), true)
    || paused()
  ) then {
    throw("Invalid decreasePosition parameters")
  } else {
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())
    let isNewPosition = oldPositionSize == 0
    let isSameDirection = if (oldPositionSize > 0) then {
      _direction == DIR_LONG
    } else {
      _direction == DIR_SHORT
    }
    let expandExisting = !isNewPosition && isSameDirection
    let isAdd = _direction == DIR_LONG
    
    let (
      newPositionSize,
      newPositionRemainMargin,
      newPosiionOpenNotional,
      newPositionLatestCPF,
      baseAssetReserveAfter,
      quoteAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = if (isNewPosition || expandExisting) then {
      throw("Use increasePosition to open new or increase position")
    } else {
      let openNotional = muld(_amount, _leverage)
      let (oldPositionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(i.caller.toString(), PNL_OPTION_SPOT)
      if (oldPositionNotional > openNotional) then {
        let ( 
            exchangedPositionSize, 
            quoteAssetReserveAfter, 
            baseAssetReserveAfter,
            totalPositionSizeAfter,
            cumulativeNotionalAfter
         ) = swapInput(isAdd, openNotional)
         let exchangedPositionSizeAbs = abs(exchangedPositionSize)

         if (_minBaseAssetAmount != 0 && exchangedPositionSizeAbs < _minBaseAssetAmount) then {
              throw("Too little basse asset exchanged, got " + exchangedPositionSizeAbs.toString() + " expected " + _minBaseAssetAmount.toString())
          } else {
            let realizedPnl = if (oldPositionSize != 0) then {
              divd(muld(unrealizedPnl, exchangedPositionSizeAbs), oldPositionSize)
            } else {
              0
            }
            let (remainMargin, badDebt, fundingPayment, oldLatestCPF) = 
              calcRemainMarginWithFundingPayment(
                  oldPositionSize, 
                  oldPositionMargin, 
                  oldPositionLstUpdCPF, 
                  realizedPnl
              )
            let exchangedQuoteAssetAmount = openNotional
            let unrealizedPnlAfter = unrealizedPnl - realizedPnl
            let remainOpenNotional = if (oldPositionSize > 0) then {
              oldPositionNotional - exchangedQuoteAssetAmount - unrealizedPnlAfter
            } else {
              unrealizedPnlAfter + oldPositionNotional - exchangedQuoteAssetAmount
            }

            let newPositionSize = oldPositionSize + exchangedPositionSize
            (
              newPositionSize, # positionSize
              remainMargin, # remainMargin
              abs(remainOpenNotional), # pon
              oldLatestCPF, # latestCPF
              baseAssetReserveAfter, # baseAssetReserveAfter
              quoteAssetReserveAfter, # quoteAssetReserveAfter
              totalPositionSizeAfter, # totalPositionSizeAfter
              cumulativeNotionalAfter, # cumulativeNotionalAfter
              openInteresetNotional() - openNotional, # openInteresetNotionalAfter
              totalLongPositionSize() - if (newPositionSize > 0) then abs(exchangedPositionSize) else 0,
              totalShortPositionSize() - if (newPositionSize < 0) then abs(exchangedPositionSize) else 0
            )
          }
      } else {
        throw("Close position first")
      }
    }
    
    updatePosition(
      i.caller.toString(),
      newPositionSize,
      newPositionRemainMargin,
      newPosiionOpenNotional,
      newPositionLatestCPF
    ) 
    ++
    updateAmm(
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      totalLongAfter,
      totalShortAfter
    )
  }
}

@Callable(i)
func increasePosition(
  _direction: Int,
  _leverage: Int,
  _minBaseAssetAmount: Int
) = {
  let _rawAmount = i.payments[0].amount
  if (
    (_direction != DIR_LONG && _direction != DIR_SHORT)
    || _rawAmount <= 0
    || (_leverage < 1 * DECIMAL_UNIT || _leverage > 3 * DECIMAL_UNIT)
    || !initialized()
    || i.payments[0].assetId != quoteAsset()
    || !requireMoreMarginRatio(divd(DECIMAL_UNIT, _leverage), initMarginRatio(), true)
    || paused()
  ) then {
    throw("Invalid increasePosition parameters")
  } else {
    let feeAmount = muld(_rawAmount, fee())
    let _amount = _rawAmount - feeAmount
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())
    let isNewPosition = oldPositionSize == 0
    let isSameDirection = if (oldPositionSize > 0) then {
      _direction == DIR_LONG
    } else {
      _direction == DIR_SHORT
    }
    let expandExisting = !isNewPosition && isSameDirection
    let isAdd = _direction == DIR_LONG
    
    let (
      newPositionSize,
      newPositionRemainMargin,
      newPosiionOpenNotional,
      newPositionLatestCPF,
      baseAssetReserveAfter,
      quoteAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = if (isNewPosition || expandExisting) then {
      let openNotional = muld(_amount, _leverage)
      let ( 
        amountBaseAssetBought,
        quoteAssetReserveAfter, 
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter
      ) = swapInput(isAdd, openNotional)
       
      if (_minBaseAssetAmount != 0 && abs(amountBaseAssetBought) < _minBaseAssetAmount) then {
         throw("Limit error: " + abs(amountBaseAssetBought).toString() + " < " + _minBaseAssetAmount.toString())
       } else {
        let newPositionSize = oldPositionSize + amountBaseAssetBought
        let increaseMarginRequirement = divd(openNotional, _leverage)
        let (remainMargin, x1, x2, oldLatestCPF) =
          calcRemainMarginWithFundingPayment(
                oldPositionSize, 
                oldPositionMargin, 
                oldPositionLstUpdCPF, 
                increaseMarginRequirement
            )
        
        (
          newPositionSize, # positionSize
          remainMargin, # remainMargin
          oldPositionOpenNotional + openNotional, # pon
          oldLatestCPF, # latestCPF
          baseAssetReserveAfter, # baseAssetReserveAfter
          quoteAssetReserveAfter, # quoteAssetReserveAfter
          totalPositionSizeAfter, # totalPositionSizeAfter
          cumulativeNotionalAfter, # cumulativeNotionalAfter
          openInteresetNotional() + openNotional, # openInteresetNotionalAfter
          totalLongPositionSize() + if (newPositionSize > 0) then abs(amountBaseAssetBought) else 0,
          totalShortPositionSize() + if (newPositionSize < 0) then abs(amountBaseAssetBought) else 0
        )
       }
    } else {
      let openNotional = muld(_amount, _leverage)
      let (oldPositionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(i.caller.toString(), PNL_OPTION_SPOT)
      if (oldPositionNotional > openNotional) then {
        throw("Use decreasePosition to decrease position size")
      } else {
        throw("Close position first")
      }
      
    }

    let feeToStakers = feeAmount / 2
    let feeToInsurance = feeAmount - feeToStakers
    
    strict stake = invoke(
      quoteAssetStaking(),
      "lockNeutrinoSP",
      [stakingAddress().toString(), ALL_FEES],
      [AttachedPayment(quoteAsset(), _amount)]
    )

    strict depositInsurance = invoke(
      insuranceAddress(),
      "deposit",
      [],
      [AttachedPayment(quoteAsset(), feeToInsurance)]
    )

    
    updatePosition(
      i.caller.toString(),
      newPositionSize,
      newPositionRemainMargin,
      newPosiionOpenNotional,
      newPositionLatestCPF
    ) 
    ++
    updateAmm(
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      totalLongAfter,
      totalShortAfter
    )
    ++
    transferFee(feeToStakers)
    ++
    updateBalance(cbalance() + _amount)
  }
}

@Callable(i)
func addMargin() = {
  let _rawAmount = i.payments[0].amount
  if (
    i.payments[0].assetId != quoteAsset()
    || !requireOpenPosition(i.caller.toString())
    || !initialized()
    || paused()
  ) then {
    throw("Invalid addMargin parameters")
  } else {
    let feeAmount = muld(_rawAmount, fee())
    let _amount = _rawAmount - feeAmount

    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())

    let feeToStakers = feeAmount / 2
    let feeToInsurance = feeAmount - feeToStakers
    
    strict stake = invoke(
      quoteAssetStaking(),
      "lockNeutrinoSP",
      [stakingAddress().toString(), ALL_FEES],
      [AttachedPayment(quoteAsset(), _amount)]
    )

    strict depositInsurance = invoke(
      insuranceAddress(),
      "deposit",
      [],
      [AttachedPayment(quoteAsset(), feeToInsurance)]
    )

    updatePosition(
      i.caller.toString(),
      oldPositionSize,
      oldPositionMargin + _amount,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    )
    ++
    transferFee(feeToStakers)
    ++
    updateBalance(cbalance() + _amount)
  }
}

@Callable(i)
func removeMargin(
  _amount: Int
) = {
  if (
    _amount <= 0
    || !requireOpenPosition(i.caller.toString())
    || !initialized()
    || paused()
  ) then {
    throw("Invalid removeMargin parameters")
  } else {
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())

    let marginDelta = -_amount
    let (remainMargin, badDebt, x1, latestCPF1) =
      calcRemainMarginWithFundingPayment(
        oldPositionSize,
        oldPositionMargin,
        oldPositionLstUpdCPF,
        marginDelta
    )
    if (badDebt != 0) then {
      throw("Invalid added margin amount")
    } else {
      strict unstake = invoke(
        quoteAssetStaking(),
        "unlockNeutrino",
        [_amount, quoteAsset().toBase58String()],
        []
      )
      
      updatePosition(
        i.caller.toString(),
        oldPositionSize,
        remainMargin,
        oldPositionOpenNotional,
        latestCPF1
      )
      ++
      withdraw(i.caller, _amount)
      ++
      updateBalance(cbalance() - _amount)
    }
  }
}

@Callable(i)
func closePosition() = {
    if (
      !requireOpenPosition(i.caller.toString())
      || !initialized()
      || paused()
  ) then {
    throw("Invalid closePosition parameters")
  } else {
    let (
          x1,
          positionBadDebt,
          realizedPnl,
          marginToVault,
          quoteAssetReserveAfter,
          baseAssetReserveAfter,
          totalPositionSizeAfter,
          cumulativeNotionalAfter,
          openInteresetNotionalAfter,
          x2,
          totalLongAfter,
          totalShortAfter
    ) = internalClosePosition(i.caller.toString())

    if (positionBadDebt > 0) then {
      throw("Unable to close position with bad debt")
    } else {
      let withdrawAmount = abs(marginToVault)

      let ammBalance = cbalance() - withdrawAmount
      let (ammNewBalance, getFromInsurance) = if (ammBalance < 0) then {
        (0, abs(ammBalance))
      } else {
        (ammBalance, 0)
      }

      strict x = if (getFromInsurance > 0) then {
        strict withdrawInsurance = invoke(
          insuranceAddress(),
          "withdraw",
          [getFromInsurance],
          []
        )
        []
      } else {
        []
      }

      strict unstake = invoke(
        quoteAssetStaking(),
        "unlockNeutrino",
        [withdrawAmount - getFromInsurance, quoteAsset().toBase58String()],
        []
      )
      
      deletePosition(i.caller.toString()) 
      ++ 
      updateAmm(
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter,
        openInteresetNotionalAfter,
        totalLongAfter,
        totalShortAfter
      )
      ++
      withdraw(i.caller, withdrawAmount)
      ++
      updateBalance(ammNewBalance)
    }
  }
}

@Callable(i)
func liquidate(_trader: String) = {
  let marginRatio = if (isOverFluctuationLimit()) then {
    getMarginRatioByOption(_trader, PNL_OPTION_ORACLE)
  } else {
    getMarginRatioByOption(_trader, PNL_OPTION_SPOT)
  }
  if (
    !requireMoreMarginRatio(marginRatio, mmr(), false)
    || !initialized()
    || paused()
  ) then {
    throw("Unable to liquidate")
  } else {
    let (
      x1,
      badDebt,
      x2,
      marginToVault,
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      exchangedQuoteAssetAmount,
      totalLongAfter,
      totalShortAfter
    ) = internalClosePosition(_trader)
    let feeToLiquidator = muld(exchangedQuoteAssetAmount, liquidationFeeRatio()) / 2
    let (liquidationBadDebt, remainMargin, totalBadDebt) = if (feeToLiquidator > marginToVault) then {
      (
        feeToLiquidator - marginToVault, # liquidationBadDebt
        marginToVault, # remainMargin
        badDebt + feeToLiquidator - marginToVault # totalBadDebt
      )
    } else {
      (
        0, # liquidationBadDebt
        marginToVault - feeToLiquidator, 
        badDebt
      )
    }

    let bd = cbalance() - feeToLiquidator
    let (nb, fromi) = if (bd < 0) then {
      (0, abs(bd))
    } else {
      (bd, 0)
    }

    strict x = if (fromi > 0) then {
      strict withdrawInsurance = invoke(
        insuranceAddress(),
        "withdraw",
        [fromi],
        []
      )
      []
    } else {
      []
    }

    strict unstake = invoke(
      quoteAssetStaking(),
      "unlockNeutrino",
      [feeToLiquidator - fromi, quoteAsset().toBase58String()],
      []
    )

    deletePosition(_trader)
    ++ 
    updateAmm(
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInteresetNotionalAfter,
      totalLongAfter,
      totalShortAfter
    )
    ++
    withdraw(i.caller, feeToLiquidator)
    ++
    updateBalance(nb)
  }
}

@Callable(i)
func payFunding() = {
  let fundingBlockTimestamp = nextFundingBlockTimestamp()
  if (
    lastBlock.timestamp < fundingBlockTimestamp
    || !initialized()
    || paused()
  ) then {
    throw("Invalid funding block timestamp: " + lastBlock.timestamp.toString() + " < " + fundingBlockTimestamp.toString())
  } else {
    let underlyingPrice = getOracleTwapPrice()
    let spotTwapPrice = getTwapSpotPrice()
    let premium = spotTwapPrice - underlyingPrice
    let (shortPremiumFraction, longPremiumFraction) =
      # Handle special case: no shorts, or no longs. In this case funding in this period not exchanged.  
      #
      if (totalShortPositionSize() == 0 || totalLongPositionSize() == 0) then {
        (0, 0)
      } else {
        if (premium < 0) then {
          # underlyingPrice > spotTwapPrice, need to push spotTwapPrice UP, short pays the longs
          # how much to take from shorts this funding period
          let shortPremiumFraction = divd(muld(premium, fundingPeriodDecimal()), ONE_DAY)

          # how much longs will get from shorts totall this funding period
          let longPremiumFraction = divd(muld(shortPremiumFraction, totalShortPositionSize()), totalLongPositionSize())
          (shortPremiumFraction, longPremiumFraction)
        } else {
          # underlyingPrice < spotTwapPrice, need to push spotTwapPrice DOWN, longs pays the shorts
          # how much to take from longs this funding period
          let longPremiumFraction = divd(muld(premium, fundingPeriodDecimal()), ONE_DAY)

          # how much shorts will get from longs totall this funding period
          let shortPremiumFraction = divd(muld(longPremiumFraction, totalLongPositionSize()), totalShortPositionSize())
          (shortPremiumFraction, longPremiumFraction)
        }
      }
    
    updateFunding(
      fundingBlockTimestamp + fundingPeriodSeconds(),
      latestLongCumulativePremiumFraction() + longPremiumFraction,
      latestShortCumulativePremiumFraction() + shortPremiumFraction,
      divd(longPremiumFraction, underlyingPrice),
      divd(shortPremiumFraction, underlyingPrice)
    )
  }
}

@Callable(i)
func v_get(_trader: String) = {
  let (x1, x2, x3, x4) = internalClosePosition(_trader)
  throw(s(x2) + s(x3) + s(x4) + s(getMarginRatio(_trader)))
}

@Callable(i)
func view_calcRemainMarginWithFundingPayment(_trader: String) = {
    let (
      positionSize,
      positionMargin,
      pon,
      positionLstUpdCPF
    ) = getPosition(_trader)
    let (positionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, PNL_OPTION_SPOT)
    let (remainMargin, badDebt, fundingPayment) = calcRemainMarginWithFundingPayment(
        positionSize,
        positionMargin,
        positionLstUpdCPF,
        unrealizedPnl
    )
    throw(s(remainMargin) + s(fundingPayment))
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey())