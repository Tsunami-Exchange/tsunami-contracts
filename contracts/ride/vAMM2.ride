# This is a vAMM + Exchange contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

# Oracle keys
let k_ora_key = "k_ora_key" # Key in Index Price Oracle account to read price from
let k_ora_block_key = "k_ora_block_key" # Key for last updated block in oracle
let k_ora = "k_ora"         # Address of Index Price oracle account

# AMM Balance
let k_balance = "k_balance" # How much of a trader's funds is controlled by this AMM

# Trader Position   
let k_positionSize = "k_positionSize"                 # Trader position size (base asset)
let k_positionMargin = "k_positionMargin"             # Trader position margin (quote asset) - how much quote asset is supporting the position
let k_positionOpenNotional = "k_positionOpenNotional" # Trader position open notional - how much quote asset they have borrowed
let k_positionLastUpdatedCumulativePremiumFraction = "k_positionFraction"        # Trader position last updated cumulative premium fraction

# Global initialization state
let k_initialized = "k_initialized"                       # If AMM was properly initialized
let k_paused = "k_paused"

# Exchange settings
let k_fee = "k_fee"                                       # Exchange fee. Default is 1%. 1/2 goes to stakers, 1/2 goes to insurance fund
let k_fundingPeriod = "k_fundingPeriod"                   # Funding period. By default funding is paid once per hour
let k_initMarginRatio = "k_initMarginRatio"               # Initial margin ratio. Controls how much leverage can be applied when position is created
let k_maintenanceMarginRatio = "k_mmr"                    # Maintenance margin ratio (MMR). When MR < MMR position can be liquidated
let k_liquidationFeeRatio = "k_liquidationFeeRatio"       # % of position size liquidator will get for himself. 1/2 of this goes to liquidator, 1/2 - to insurance fund
let k_partialLiquidationRatio = "k_partLiquidationRatio"  # % of position notional that will be liquidated in case 0 < MR < MMR
let k_spreadLimit = "k_spreadLimit"                       # abs((marketPrice - oraclePrice) / oraclePrice). If over spread limit, liquidations consult oracle price
let k_maxPriceImpact = "k_maxPriceImpact"                 # maximum price impact per order

# TWAP data
let k_lastDataStr = "k_lastDataStr"                       # List of last 15 TWAP computations (best case - we have a value for each of last 15 mins)
let k_lastMinuteId = "k_lastMinuteId"                     # ID of last minute, when price measurements was taken
let k_twapDataLastCumulativePrice = "k_twapDataLastCumulativePrice" # Last cumulative price data (previousPrice * minutesPriceLasted)
let k_twapDataLastPrice = "k_twapDataLastPrice"           # Last price value
let k_twapDataPreviousMinuteId = "k_twapDataPreviousMinuteId" # Previous minute id for current twap data

# Funding state
let k_latestLongCumulativePremiumFraction = "k_latestLongPremiumFraction" # Latest Cumulative Premium Fraction. (Part of Premium paid this funding period). Premium = MarkPrice - IndexPrice
let k_latestShortCumulativePremiumFraction = "k_latestShortPremiumFraction" # Latest Cumulative Premium Fraction. (Part of Premium paid this funding period). Premium = MarkPrice - IndexPrice
let k_nextFundingBlock = "k_nextFundingBlockMinTimestamp"         # Timestamp of Next block when funding becomes available
let k_longFundingRate = "k_longFundingRate"                       # Funding rate  Cumulative Premium Fraction / Index Price
let k_shortFundingRate = "k_shortFundingRate"                     # Funding rate  Cumulative Premium Fraction / Index Price

# AMM State
let k_quoteAssetReserve = "k_qtAstR"                      # Quote Asset Reserve (AMM)
let k_baseAssetReserve = "k_bsAstR"                       # Base Asset Reserve (AMM)
let k_totalPositionSize = "k_totalPositionSize"           # Total trader position size (in Base asset)
let k_totalLongPositionSize = "k_totalLongPositionSize"   # Total LONG trader position size (in Base asset)
let k_totalShortPositionSize = "k_totalShortPositionSize" # Total SHORT trader position size (in Base asset)
let k_cumulativeNotional = "k_cumulativeNotional"         # Cumulative Notional (all positions)
let k_openInterestNotional = "k_openInterestNotional"     # Open Interest Notional (all positions)

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress"         # Address of Coordinator (base contract that keeps references to all infrastructure)

# Coordinator keys
let k_insurance_address = "k_insurance_address"   # Address of insurance contract
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_admin_public_key = "k_admin_public_key"     # Pubic key of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset (USDN in our case)
let k_quote_staking = "k_quote_staking"           # Address of quote asset staking contract (USDN staking in our case)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits
let k_miner_address = "k_miner_address"           # Liquidity mining contract address

##### Coordinator data ##### 
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
func adminPublicKey() = fromBase58String(coordinator().getStringValue(k_admin_public_key))
func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
func quoteAssetStaking() = addressFromString(coordinator().getStringValue(k_quote_staking)).valueOrErrorMessage("Quote asset staking not set")
func stakingAddress() = addressFromString(coordinator().getStringValue(k_staking_address)).valueOrErrorMessage("Insurance not set")
func insuranceAddress() = addressFromString(coordinator().getStringValue(k_insurance_address)).valueOrErrorMessage("Insurance not set")
func minerAddress() = addressFromString(coordinator().getStringValue(k_miner_address)).valueOrErrorMessage("Insurance not set")

##### Core constants #####

let DIR_LONG                = 1
let DIR_SHORT               = 2
let TWAP_INTERVAL           = 15
let ORACLE_INTERVAL         = 15

let SECONDS = 1000
let DECIMAL_UNIT = 1 * (10 * 10 * 10 * 10 * 10 * 10)
let ONE_DAY = 86400 * DECIMAL_UNIT
let ALL_FEES = 100
let PNL_OPTION_SPOT = 1
let PNL_OPTION_ORACLE = 2

##### Helper functions #####

func s(_x: Int) = _x.toString() + ","

func divd(_x: Int, _y: Int) = fraction(_x, DECIMAL_UNIT, _y, HALFEVEN)
func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMAL_UNIT, HALFEVEN)
func abs(_x: Int) = if (_x > 0) then _x else -_x
func vmax(_x: Int, _y: Int) = if (_x >= _y) then _x else _y

func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func listToStr(_list: List[String]) = {
  func _join(accumulator: String, val: String) = accumulator + val + ","
  let newListStr = FOLD<20>(_list, "", _join)
  let newListStrU = newListStr.dropRight(1)
  let newListStrR = if (newListStrU.take(1) == ",") then newListStrU.drop(1) else newListStrU
  newListStrR
}

func strToList(_str: String) = _str.split(",")
func pushToQueue(_list: List[String], _maxSize: Int, _value: String) = if (_list.size() > _maxSize) then {
        _list.removeByIndex(0) :+ _value
      } else {
        _list :+ _value
      }

##### Accessor functions #####
func int(k: String) = this.getInteger(k).valueOrErrorMessage("no value for " + k)

func cbalance() = int(k_balance)
func fee() = int(k_fee)
func initMarginRatio() = int(k_initMarginRatio)
func qtAstR() = int(k_quoteAssetReserve)
func bsAstR() = int(k_baseAssetReserve)
func totalPositionSize() = int(k_totalPositionSize)
func cumulativeNotional() = int(k_cumulativeNotional)
func openInterestNotional() = int(k_openInterestNotional)
func nextFundingBlockTimestamp() = int(k_nextFundingBlock)
func fundingPeriodRaw() = int(k_fundingPeriod)
func fundingPeriodDecimal() = fundingPeriodRaw() * DECIMAL_UNIT
func fundingPeriodSeconds() = fundingPeriodRaw() * SECONDS
func maintenanceMarginRatio() = int(k_maintenanceMarginRatio)
func liquidationFeeRatio() = int(k_liquidationFeeRatio)
func partialLiquidationRatio() = int(k_partialLiquidationRatio)
func spreadLimit() = int(k_spreadLimit)
func maxPriceImpact() = int(k_maxPriceImpact)
func latestLongCumulativePremiumFraction() = int(k_latestLongCumulativePremiumFraction)
func latestShortCumulativePremiumFraction() = int(k_latestShortCumulativePremiumFraction)
func totalShortPositionSize() = int(k_totalShortPositionSize)
func totalLongPositionSize() = int(k_totalLongPositionSize)

##### Validator functions #####
func requireMoreMarginRatio(_marginRatio: Int, _baseMarginRatio: Int, _largerThanOrEqualTo: Boolean) = {
  let remainingMarginRatio = _marginRatio - _baseMarginRatio
  if (_largerThanOrEqualTo && remainingMarginRatio < 0) then {
    throw("Invalid margin")
  } else {
    if (!_largerThanOrEqualTo && remainingMarginRatio >= 0) then {
      throw("Invalid margin")
    } else {
      true
    }
  }
}

# Returns latest cumulative premium fraction for a position (long for long position, short for short)
func latestCumulativePremiumFraction(
  _positionSize: Int
) = if (_positionSize == 0)
  then throw("Should not be called with _positionSize == 0")
  else if (_positionSize > 0)
    then latestLongCumulativePremiumFraction() 
    else latestShortCumulativePremiumFraction()

# Returns info on traders position
func getPosition(_trader: String) = {
  let positionSizeOpt = this.getInteger(k_positionSize.toCompositeKey(_trader))
  match (positionSizeOpt) {
      case positionSize: Int => (
        positionSize,
        this.getIntegerValue(k_positionMargin.toCompositeKey(_trader)),
        this.getIntegerValue(k_positionOpenNotional.toCompositeKey(_trader)),
        this.getIntegerValue(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(_trader))
      )
      case _ => (0, 0, 0, 0)
    }
}

# Checks that a trader have an open position
func requireOpenPosition(_trader: String) = {
    if (getPosition(_trader)._1 == 0) then {
      throw("No open position")
    } else {
      true
    }
}

# Checks if AMM was properly initialized
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

# Checks of AMM was paused
func paused() = this.getBoolean(k_paused).valueOrElse(false)

# Computes new AMM state (quoteAssetReserve, baseAssetReserve, totalPositionSize, cumulativeNotional)
func updateReserve(_isAdd: Boolean, _quoteAssetAmount: Int, _baseAssetAmount: Int) = {
  if (_isAdd) then {
    let newBase = bsAstR() - _baseAssetAmount
    if (newBase <= 0) then {
      throw("Tx lead to base asset reserve <= 0, revert")
    } else {
      (
        qtAstR() + _quoteAssetAmount,
        newBase,
        totalPositionSize() + _baseAssetAmount,
        cumulativeNotional() + _quoteAssetAmount
      )
    }
  } else {
    let newQuote = qtAstR() - _quoteAssetAmount
    if (newQuote <= 0) then {
      throw("Tx lead to base quote reserve <= 0, revert")
    } else {
      (
        newQuote,
        bsAstR() + _baseAssetAmount,
        totalPositionSize() - _baseAssetAmount,
        cumulativeNotional() - _quoteAssetAmount
      )
    }
  }
}

# Computes result of swapping a given amount of _quoteAssetAmount
# Returns full new AMM state, as well as amount of base asset bought / sold
# _isAdd - true when we are adding quote asset to AMM, false when removing
func swapInput(_isAdd: Boolean, _quoteAssetAmount: Int) = {
  let _qtAstR = qtAstR()
  let _bsAstR = bsAstR()
  let k = muld(_qtAstR, _bsAstR)
  let quoteAssetReserveAfter = if (_isAdd) then {
    _qtAstR + _quoteAssetAmount
  } else {
    _qtAstR - _quoteAssetAmount
  }

  let baseAssetReserveAfter = divd(k, quoteAssetReserveAfter)
  let amountBaseAssetBoughtAbs = abs(baseAssetReserveAfter - _bsAstR)
  let amountBaseAssetBought = if (_isAdd) then {
    amountBaseAssetBoughtAbs
  } else {
    -amountBaseAssetBoughtAbs
  }
  
  let (
    quoteAssetReserveAfter1,
    baseAssetReserveAfter1,
    totalPositionSizeAfter1,
    cumulativeNotionalAfter1
  ) = updateReserve(_isAdd, _quoteAssetAmount, amountBaseAssetBoughtAbs)

  let priceBefore = divd(_qtAstR, _bsAstR)
  let marketPrice = divd(_quoteAssetAmount, amountBaseAssetBoughtAbs)
  let priceDiff = abs(priceBefore - marketPrice)
  let priceImpact = DECIMAL_UNIT - divd(priceBefore, (priceBefore + priceDiff))

  let maxPriceImpactValue = maxPriceImpact()
  if (priceImpact > maxPriceImpactValue) then {
    throw("Price impact " + priceImpact.toString() + " > max price impact " + maxPriceImpactValue.toString() 
      + " before quote asset: " + _qtAstR.toString()
      + " before base asset: " + _bsAstR.toString()
      + " quote asset amount to exchange: " + _quoteAssetAmount.toString()
      + " price before: " + priceBefore.toString()
      + " marketPrice: " + marketPrice.toString()
    )
  } else {
    (
      amountBaseAssetBought,
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1
    )
  }
}

# Computes position remaining margin with funding payment
func calcRemainMarginWithFundingPayment(
  _oldPositionSize: Int, 
  _oldPositionMargin: Int, 
  _oldPositionCumulativePremiumFraction: Int, 
  _marginDelta: Int
) = {
  let fundingPayment = if (_oldPositionSize != 0) then {
    let _latestCumulativePremiumFraction = latestCumulativePremiumFraction(_oldPositionSize)
    muld((_latestCumulativePremiumFraction - _oldPositionCumulativePremiumFraction), _oldPositionSize)
  } else {
    0
  }
  let signedMargin = _marginDelta - fundingPayment + _oldPositionMargin
  let (remainMargin, badDebt) = if (signedMargin < 0) then {
    (0, abs(signedMargin))
  } else {
    (abs(signedMargin), 0)
  }

  (remainMargin, badDebt, fundingPayment)
}

# Computes result of swapping a given amount of _baseAssetAmount
# Returns full new AMM state, as well as amount of quote asset bought / sold
# _isAdd - true when we are adding quote asset to AMM, false when removing
func swapOutputWithReserves(
  _isAdd: Boolean, 
  _baseAssetAmount: Int,
  _checkMaxPriceImpact: Boolean,
  _quoteAssetReserve: Int,
  _baseAssetReserve: Int
) = {
  let priceBefore = divd(_quoteAssetReserve, _baseAssetReserve)

  if (_baseAssetAmount == 0) then {
    throw("Invalid base asset amount")
  } else {
    let k = muld(_quoteAssetReserve, _baseAssetReserve)
    let baseAssetPoolAmountAfter = if (_isAdd) then {
      _baseAssetReserve + _baseAssetAmount 
    } else {
      _baseAssetReserve - _baseAssetAmount
    }

    let quoteAssetAfter = divd(k, baseAssetPoolAmountAfter)
    let quoteAssetSold = abs(quoteAssetAfter - _quoteAssetReserve)

    let maxPriceImpactValue = maxPriceImpact()

    let (
      quoteAssetReserveAfter1,
      baseAssetReserveAfter1,
      totalPositionSizeAfter1,
      cumulativeNotionalAfter1
    ) = updateReserve(!_isAdd, quoteAssetSold, _baseAssetAmount)

    let marketPrice = divd(quoteAssetSold, _baseAssetAmount)
    let priceDiff = abs(priceBefore - marketPrice)
    let priceImpact = DECIMAL_UNIT - divd(priceBefore, (priceBefore + priceDiff))
    
    if (priceImpact > maxPriceImpactValue && _checkMaxPriceImpact) then {
      throw("Price impact " + priceImpact.toString() + " > max price impact " + maxPriceImpactValue.toString() 
        + " before quote asset: " + _quoteAssetReserve.toString()
        + " before base asset: " + _baseAssetReserve.toString()
        + " base asset amount to exchange: " + _baseAssetAmount.toString()
        + " price before: " + priceBefore.toString()
        + " market price: " + marketPrice.toString()
      )
    } else {
      (
        quoteAssetSold,
        quoteAssetReserveAfter1,
        baseAssetReserveAfter1,
        totalPositionSizeAfter1,
        cumulativeNotionalAfter1,
        totalLongPositionSize()  - if (_isAdd)  then abs(_baseAssetAmount) else 0,
        totalShortPositionSize() - if (!_isAdd) then abs(_baseAssetAmount) else 0,
        priceImpact
      )
    }
  }
}

func swapOutput(
  _isAdd: Boolean, 
  _baseAssetAmount: Int,
  _checkMaxPriceImpact: Boolean
) = {
  swapOutputWithReserves(
    _isAdd,
    _baseAssetAmount,
    _checkMaxPriceImpact,
    qtAstR(),
    bsAstR()
  )
}

# Returns oracle price (Index Price)
func getOracleTwapPrice() = {
  let oracle = addressFromString(this.getStringValue(k_ora)).valueOrErrorMessage("")
  let priceKey = this.getStringValue(k_ora_key)
  let blockKey = this.getStringValue(k_ora_block_key)
  let lastValue = oracle.getInteger(priceKey).valueOrErrorMessage("Can not get oracle price. Oracle: " + oracle.toString() + " key: " + priceKey)
  # let lastOracleBlock = oracle.getIntegerValue(k_ora_block_key)

  # Check that oracle data is not too old
  #if (lastBlock.height <= lastOracleBlock || lastBlock.height - lastOracleBlock > ORACLE_INTERVAL) then {
  #  throw("Invalid oracle data interval")
  #} else {
  lastValue
  #}
}

# Returns current spot price
func getSpotPrice() = {
  let _quoteAssetReserve = qtAstR()
  let _baseAssetReserve = bsAstR()
  divd(_quoteAssetReserve, _baseAssetReserve)
}

# Checks if stop price and index price diverge more then spreadLimit
func isOverFluctuationLimit() = {
  let oraclePrice = getOracleTwapPrice()
  let currentPrice = getSpotPrice()
  divd(abs(oraclePrice - currentPrice), oraclePrice) > spreadLimit()
}

func getPositionAdjustedOpenNotional(
  _positionSize: Int, 
  _option: Int,
  _quoteAssetReserve: Int,
  _baseAssetReserve: Int
) = {
  let positionSizeAbs = abs(_positionSize)
  let isShort = _positionSize < 0
  let positionNotional = if (_option == PNL_OPTION_SPOT) then {
    let (outPositionNotional, x1, x2, x3) = swapOutputWithReserves(
      !isShort,
      positionSizeAbs,
      false,
      _quoteAssetReserve,
      _baseAssetReserve
    )
    outPositionNotional
  } else {
    muld(positionSizeAbs, getOracleTwapPrice())
  }

  positionNotional
}

# Returns position notional (current value of a position) and
# position profit/loss (delta between initial position notional and current notional)
# Accept calculation option - to use spot or index price
func getPositionNotionalAndUnrealizedPnl(_trader: String, _option: Int) = {
  let (
      positionSize,
      positionMargin,
      positionOpenNotional,
      positionLstUpdCPF
    ) = getPosition(_trader)

    if (positionSize == 0) then {
      throw("Invalid position size")
    } else {
      let isShort = positionSize < 0
      let positionNotional = getPositionAdjustedOpenNotional(
        positionSize,
        _option,
        qtAstR(),
        bsAstR()
      )

      let unrealizedPnl = if (isShort) then {
        positionOpenNotional - positionNotional
      } else {
        positionNotional - positionOpenNotional
      }
      (
        positionNotional,
        unrealizedPnl
      )
    }
}

# Computes actual margin ratio
func calcMarginRatio(_remainMargin: Int, _badDebt: Int, _positionNotional: Int) = {
  divd(_remainMargin - _badDebt, _positionNotional)
}

# Computes position margin ratio
# Accept calculation option - to use spot or index price
func getMarginRatioByOption(_trader: String, _option: Int) = {
    let (
      positionSize,
      positionMargin,
      pon,
      positionLstUpdCPF
    ) = getPosition(_trader)

    let (positionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, _option)
    let (remainMargin, badDebt) = calcRemainMarginWithFundingPayment(
        positionSize,
        positionMargin,
        positionLstUpdCPF,
        unrealizedPnl
    )
    calcMarginRatio(remainMargin, badDebt, positionNotional)
}

# Computes position spot margin ratio
func getMarginRatio(_trader: String) = getMarginRatioByOption(_trader, PNL_OPTION_SPOT)

func getPartialLiquidationAmount(_trader: String, _positionSize: Int) = {
    let maximumRatio = vmax(partialLiquidationRatio(), DECIMAL_UNIT - divd(getMarginRatio(_trader), maintenanceMarginRatio()))
    let maxExchangedPositionSize = muld(abs(_positionSize), maximumRatio)
    let swapResult = swapOutput(
      _positionSize > 0,
      maxExchangedPositionSize,
      false
    )
    let maxExchangedQuoteAssetAmount = swapResult._1
    let priceImpact = swapResult._8

    if (priceImpact < maxPriceImpact()) then {
      maxExchangedQuoteAssetAmount
    } else {
      let exchangedPositionSize = muld(abs(_positionSize), partialLiquidationRatio())
      let exchangedQuoteAssetAmount = swapOutput(
        _positionSize > 0,
        exchangedPositionSize,
        false
      )._1
      
      exchangedQuoteAssetAmount
    }
}

# Computes changes to AMM state, resulting in closing trader's position
func internalClosePosition(_trader: String, _checkMaxPriceImpact: Boolean) = {
    let (
      positionSize,
      positionMargin,
      positionOpenNotional,
      positionLstUpdCPF
    ) = getPosition(_trader)

    let unrealizedPnl = getPositionNotionalAndUnrealizedPnl(_trader, PNL_OPTION_SPOT)._2
    let (remainMargin, badDebt) = calcRemainMarginWithFundingPayment(
        positionSize, 
        positionMargin, 
        positionLstUpdCPF,
        unrealizedPnl
    )

    let exchangedPositionSize = -positionSize
    let realizedPnl = unrealizedPnl
    let marginToVault = -remainMargin

    let (
      exchangedQuoteAssetAmount, 
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = swapOutput(
        positionSize > 0,
        abs(positionSize),
        _checkMaxPriceImpact
    )
    
    let openInterestNotionalAfter = openInterestNotional() - positionOpenNotional
    (
      exchangedPositionSize,
      badDebt,
      realizedPnl,
      marginToVault,
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInterestNotionalAfter,
      exchangedQuoteAssetAmount,
      totalLongAfter,
      totalShortAfter
    )
}

# Computes TWAP spot price
func getTwapSpotPrice() = {
  let minuteId = lastBlock.timestamp / 1000 / 60
  let startMinuteId = minuteId - TWAP_INTERVAL
  let listStr = this.getString(k_lastDataStr).valueOrElse("")
  let list = listStr.split(",")
  func filterFn(accumulator: List[Int], next: String) = {
    if (next.parseIntValue() <= startMinuteId) then {
      accumulator :+ next.parseIntValue()
    } else {
      accumulator
    }
  }
  let listF = FOLD<20>(list, [], filterFn)
  let maxIndex = if (listF.size() > 0) then {
    max(listF)
  } else {
    list.getElement(0).parseIntValue()
  }
  let lastMinuteId = this.getInteger(k_lastMinuteId).valueOrElse(0)
  let endLastCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + lastMinuteId.toString()).valueOrElse(0)
  let endLastPrice = this.getInteger(k_twapDataLastPrice + "_" + lastMinuteId.toString()).valueOrElse(0)
  let nowCumulativePrice = endLastCumulativePrice + (minuteId - lastMinuteId) * endLastPrice
  
  let startLastCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + maxIndex.toString()).valueOrElse(0)
  let startLastPrice = this.getInteger(k_twapDataLastPrice + "_" + maxIndex.toString()).valueOrElse(0)
  let startCumulativePrice = startLastCumulativePrice + (startMinuteId - maxIndex) * startLastPrice
  
  (nowCumulativePrice - startCumulativePrice) / TWAP_INTERVAL
}

func updateSettings(
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fundingPeriod: Int,
  _fee: Int,
  _spreadLimit: Int,
  _maxPriceImpact: Int,
  _partialLiquidationRatio: Int
) = {
  [
    IntegerEntry(k_initMarginRatio, _initMarginRatio),
    IntegerEntry(k_maintenanceMarginRatio, _mmr),
    IntegerEntry(k_liquidationFeeRatio, _liquidationFeeRatio),
    IntegerEntry(k_fundingPeriod, _fundingPeriod),
    IntegerEntry(k_fee, _fee),
    IntegerEntry(k_spreadLimit, _spreadLimit),
    IntegerEntry(k_maxPriceImpact, _maxPriceImpact),
    IntegerEntry(k_partialLiquidationRatio, _partialLiquidationRatio)
  ]
}

func updateFunding( 
  _nextFundingBlock: Int,
  _latestLongCumulativePremiumFraction: Int,
  _latestShortCumulativePremiumFraction: Int,
  _longFundingRate: Int,
  _shortFundingRate: Int
) = {
  [
    IntegerEntry(k_nextFundingBlock, _nextFundingBlock),
    IntegerEntry(k_latestLongCumulativePremiumFraction, _latestLongCumulativePremiumFraction),
    IntegerEntry(k_latestShortCumulativePremiumFraction, _latestShortCumulativePremiumFraction),
    IntegerEntry(k_longFundingRate, _longFundingRate),
    IntegerEntry(k_shortFundingRate, _shortFundingRate)
  ]
}

func updatePosition(
  _address: String,
  _size: Int,
  _margin: Int,
  _openNotional: Int,
  _latestCumulativePremiumFraction: Int
) = {
  [
    IntegerEntry(k_positionSize.toCompositeKey(_address), _size),
    IntegerEntry(k_positionMargin.toCompositeKey(_address), _margin),
    IntegerEntry(k_positionOpenNotional.toCompositeKey(_address), _openNotional),
    IntegerEntry(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(_address), _latestCumulativePremiumFraction)
  ]
}

func appendTwap(price: Int) = {
  let minuteId = lastBlock.timestamp / 1000 / 60
  let previousMinuteId = this.getInteger(k_lastMinuteId).valueOrElse(0)
  if (minuteId < previousMinuteId) then {
    throw("TWAP out-of-order")
  } else {
    let lastMinuteId = if (previousMinuteId == 0) then minuteId else previousMinuteId
    if (minuteId > previousMinuteId) then {
      let prevCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice + "_" + previousMinuteId.toString()).valueOrElse(0)
      let prevPrice = this.getInteger(k_twapDataLastPrice + "_" + previousMinuteId.toString()).valueOrElse(price)
      let lastCumulativePrice = prevCumulativePrice + (minuteId - lastMinuteId) * prevPrice

      # Push new minute to list of last minutes with recorded TWAP info
      let list = this.getString(k_lastDataStr).valueOrElse("").strToList().pushToQueue(TWAP_INTERVAL, minuteId.toString())

      # Append new measurement to list of TWAP's
      [
        IntegerEntry(k_twapDataLastCumulativePrice.toCompositeKey(minuteId.toString()), lastCumulativePrice),
        IntegerEntry(k_twapDataLastPrice.toCompositeKey(minuteId.toString()), price),
        IntegerEntry(k_twapDataPreviousMinuteId.toCompositeKey(minuteId.toString()), previousMinuteId),
        IntegerEntry(k_lastMinuteId, minuteId),
        StringEntry(k_lastDataStr, listToStr(list))
      ]
    } else {
      let twapDataPreviousMinuteId = this.getInteger(k_twapDataPreviousMinuteId.toCompositeKey(minuteId.toString())).valueOrElse(0)
      let prevCumulativePrice = this.getInteger(k_twapDataLastCumulativePrice.toCompositeKey(twapDataPreviousMinuteId.toString())).valueOrElse(0)
      let prevPrice = this.getInteger(k_twapDataLastPrice.toCompositeKey(twapDataPreviousMinuteId.toString())).valueOrElse(price)
      let lastCumulativePrice = prevCumulativePrice + (minuteId - twapDataPreviousMinuteId) * prevPrice
      
      # Override LastCumulativePrice and LastPrice to keep latest measurement
      [
        IntegerEntry(k_twapDataLastCumulativePrice.toCompositeKey(minuteId.toString()), lastCumulativePrice),
        IntegerEntry(k_twapDataLastPrice.toCompositeKey(minuteId.toString()), price)
      ]
    }
  }
}

func updateAmmReserves(
  _qtAstR: Int,
  _bsAstR: Int
) = {
  [
    IntegerEntry(k_quoteAssetReserve, _qtAstR),
    IntegerEntry(k_baseAssetReserve, _bsAstR)
  ]
}

func updateAmm(
  _qtAstR: Int,
  _bsAstR: Int,
  _totalPositionSizeAfter: Int,
  _cumulativeNotionalAfter: Int,
  _openInterestNotional: Int,
  _totalLongPositionSize: Int,
  _totalShortPositionSize: Int
) = {
  if (_totalLongPositionSize - _totalShortPositionSize != _totalPositionSizeAfter) then {
    throw("Invalid AMM state data: " + _totalLongPositionSize.toString() + " +  " + _totalShortPositionSize.toString() + " != " + _totalPositionSizeAfter.toString())
  } else {
    updateAmmReserves(_qtAstR, _bsAstR)
    ++
    [
      IntegerEntry(k_totalPositionSize, _totalPositionSizeAfter),
      IntegerEntry(k_cumulativeNotional, _cumulativeNotionalAfter),
      IntegerEntry(k_openInterestNotional, _openInterestNotional),
      IntegerEntry(k_totalLongPositionSize, _totalLongPositionSize),
      IntegerEntry(k_totalShortPositionSize, _totalShortPositionSize)
    ] ++ appendTwap(divd(_qtAstR, _bsAstR))
  }
}

func deletePosition(
  _address: String
) = {
  [
    DeleteEntry(k_positionSize.toCompositeKey(_address)),
    DeleteEntry(k_positionMargin.toCompositeKey(_address)),
    DeleteEntry(k_positionOpenNotional.toCompositeKey(_address)),
    DeleteEntry(k_positionLastUpdatedCumulativePremiumFraction.toCompositeKey(_address))
  ]
}

func withdraw(
  _address: Address,
  _amount: Int
) = {
  let balance = assetBalance(this, quoteAsset())
  if (balance < _amount) then {
    throw("Unable to withdraw " + _amount.toString() + " from contract balance " + balance.toString())
  } else {
    [
      ScriptTransfer(_address, _amount, quoteAsset())
    ]
  }
}

func updateBalance(i: Int) = {
  if (i < 0) then {
    throw("Balance")
  } else {
    [
      IntegerEntry(k_balance, i)
    ]
  }
}

func transferFee(i: Int) = {
  [
    ScriptTransfer(stakingAddress(), i, quoteAsset())
  ]
}


##### Callable functions #####

@Callable(i)
func pause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid togglePause params")
  } else {
    [
      BooleanEntry(k_paused, true)
    ]
  }
}

@Callable(i)
func unpause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid togglePause params")
  } else {
    [
      BooleanEntry(k_paused, false)
    ]
  }
}

@Callable(i)
func addLiquidity(_quoteAssetAmount: Int) = {
  if (
    i.caller != adminAddress()
    || _quoteAssetAmount <= 0
  ) then {
    throw("Invalid addLiquidity params")
  } else {
    let _qtAstR = qtAstR()
    let _bsAstR = bsAstR()
    let price = divd(_qtAstR, _bsAstR)
    let baseAssetAmountToAdd = divd(_quoteAssetAmount, price)

    let qtAstRAfter = _qtAstR + _quoteAssetAmount
    let bsAstRAfter = _bsAstR + baseAssetAmountToAdd  

    updateAmmReserves(qtAstRAfter, bsAstRAfter)
  }
}

@Callable(i)
func removeLiquidity(_quoteAssetAmount: Int) = {
  if (
    i.caller != adminAddress()
    || _quoteAssetAmount <= 0
  ) then {
    throw("Invalid removeLiquidity params")
  } else {
    let _qtAstR = qtAstR()
    let _bsAstR = bsAstR()
    let price = divd(_qtAstR, _bsAstR)
    let baseAssetAmountToRemove = divd(_quoteAssetAmount, price)

    let qtAstRAfter = _qtAstR - _quoteAssetAmount
    let bsAstRAfter = _bsAstR - baseAssetAmountToRemove

    updateAmmReserves(qtAstRAfter, bsAstRAfter)
  }
}

@Callable(i)
func changeSettings(
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fundingPeriod: Int,
  _fee: Int,
  _spreadLimit: Int,
  _maxPriceImpact: Int,
  _partialLiquidationRatio: Int
) = {
  if (i.caller != adminAddress()) then {
    throw("Invalid changeSettings params")
  } else {
    updateSettings(
      _initMarginRatio, 
      _mmr, 
      _liquidationFeeRatio, 
      _fundingPeriod, 
      _fee, 
      _spreadLimit, 
      _maxPriceImpact,
      _partialLiquidationRatio
    )
  }
}

@Callable(i)
func initialize(
  _qtAstR: Int,
  _bsAstR: Int,
  _fundingPeriod: Int,
  _initMarginRatio: Int,
  _mmr: Int,
  _liquidationFeeRatio: Int,
  _fee: Int,
  _oracle: String,
  _oracleKey: String,
  _coordinator: String,
  _spreadLimit: Int,
  _maxPriceImpact: Int,
  _partialLiquidationRatio: Int
) = {
  if (
    _qtAstR <= 0
    || _bsAstR <= 0
    || _fundingPeriod <= 0
    || _initMarginRatio <= 0
    || _mmr <= 0
    || _liquidationFeeRatio <= 0
    || _fee <= 0
    || _spreadLimit <= 0
    || _maxPriceImpact <= 0
    || _partialLiquidationRatio <= 0
    || initialized()
  ) then {
    throw("Invalid initialize parameters")
  } else {
    updateAmm(_qtAstR, _bsAstR, 0, 0, 0, 0, 0)
    ++
    updateSettings(
      _initMarginRatio, 
      _mmr, 
      _liquidationFeeRatio, 
      _fundingPeriod, 
      _fee, 
      _spreadLimit, 
      _maxPriceImpact,
      _partialLiquidationRatio
    )
    ++
    updateFunding(
      lastBlock.timestamp + _fundingPeriod,
      0,
      0,
      0,
      0
    )
    ++
    updateBalance(0)
    ++
    [
      BooleanEntry(k_initialized, true),
      StringEntry(k_ora, _oracle),
      StringEntry(k_ora_key, _oracleKey),
      StringEntry(k_coordinatorAddress, _coordinator)
    ]
  }
}

@Callable(i)
func setInitMarginRatio(
  _initMarginRatio: Int
) = {
  if (
    _initMarginRatio <= 0
    || !initialized()
  ) then {
    throw("Invalid setInitMarginRatio parameters")
  } else {
    updateSettings(
      _initMarginRatio, 
      maintenanceMarginRatio(), 
      liquidationFeeRatio(), 
      fundingPeriodRaw(), 
      fee(), 
      spreadLimit(), 
      maxPriceImpact(),
      partialLiquidationRatio()
    )
  }
}

@Callable(i)
func decreasePosition(
  _amount: Int,
  _leverage: Int,
  _minBaseAssetAmount: Int
) = {
  if (
    _amount <= 0
    || !initialized()
    || !requireMoreMarginRatio(divd(DECIMAL_UNIT, _leverage), initMarginRatio(), true)
    || !requireOpenPosition(i.caller.toString())
    || paused()
  ) then {
    throw("Invalid decreasePosition parameters")
  } else {
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())

    let _direction = if (oldPositionSize > 0) then DIR_SHORT else DIR_LONG
    let isAdd = _direction == DIR_LONG
    
    let openNotional = muld(_amount, _leverage)
    let (oldPositionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(i.caller.toString(), PNL_OPTION_SPOT)

    let (
      newPositionSize,
      newPositionRemainMargin,
      newPositionOpenNotional,
      newPositionLatestCPF,
      baseAssetReserveAfter,
      quoteAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInterestNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = if (oldPositionNotional > openNotional) then {
      let ( 
          exchangedPositionSize, 
          quoteAssetReserveAfter, 
          baseAssetReserveAfter,
          totalPositionSizeAfter,
          cumulativeNotionalAfter
        ) = swapInput(isAdd, openNotional)
        let exchangedPositionSizeAbs = abs(exchangedPositionSize)

        if (_minBaseAssetAmount != 0 && exchangedPositionSizeAbs < _minBaseAssetAmount) then {
            throw("Too little base asset exchanged, got " + exchangedPositionSizeAbs.toString() + " expected " + _minBaseAssetAmount.toString())
        } else {
          let realizedPnl = divd(muld(unrealizedPnl, exchangedPositionSizeAbs), abs(oldPositionSize))
          let (remainMargin, badDebt, fundingPayment) = 
            calcRemainMarginWithFundingPayment(
                oldPositionSize, 
                oldPositionMargin, 
                oldPositionLstUpdCPF, 
                realizedPnl
            )
          let exchangedQuoteAssetAmount = openNotional
          let unrealizedPnlAfter = unrealizedPnl - realizedPnl
          let remainOpenNotional = if (oldPositionSize > 0) then {
            oldPositionNotional - exchangedQuoteAssetAmount - unrealizedPnlAfter
          } else {
            unrealizedPnlAfter + oldPositionNotional - exchangedQuoteAssetAmount
          }

          let newPositionSize = oldPositionSize + exchangedPositionSize
          (
            newPositionSize, # positionSize
            remainMargin, # remainMargin
            abs(remainOpenNotional), # pon
            latestCumulativePremiumFraction(newPositionSize), # latestCPF
            baseAssetReserveAfter, # baseAssetReserveAfter
            quoteAssetReserveAfter, # quoteAssetReserveAfter
            totalPositionSizeAfter, # totalPositionSizeAfter
            cumulativeNotionalAfter, # cumulativeNotionalAfter
            openInterestNotional() - openNotional, # openInterestNotionalAfter
            totalLongPositionSize() - if (newPositionSize > 0) then abs(exchangedPositionSize) else 0,
            totalShortPositionSize() - if (newPositionSize < 0) then abs(exchangedPositionSize) else 0
          )
        }
    } else {
      throw("Close position first")
    }

    strict notifyNotional = invoke(
      minerAddress(),
      "notifyNotional",
      [i.caller.toString(), newPositionOpenNotional],
      []
    )
    
    updatePosition(
      i.caller.toString(),
      newPositionSize,
      newPositionRemainMargin,
      newPositionOpenNotional,
      newPositionLatestCPF
    ) 
    ++
    updateAmm(
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInterestNotionalAfter,
      totalLongAfter,
      totalShortAfter
    )
  }
}

@Callable(i)
func increasePosition(
  _direction: Int,
  _leverage: Int,
  _minBaseAssetAmount: Int
) = {
  let _rawAmount = i.payments[0].amount
  if (
    (_direction != DIR_LONG && _direction != DIR_SHORT)
    || _rawAmount <= 0
    || !initialized()
    || i.payments[0].assetId != quoteAsset()
    || !requireMoreMarginRatio(divd(DECIMAL_UNIT, _leverage), initMarginRatio(), true)
    || paused()
  ) then {
    throw("Invalid increasePosition parameters")
  } else {
    let feeAmount = muld(_rawAmount, fee())
    let _amount = _rawAmount - feeAmount
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())
    let isNewPosition = oldPositionSize == 0
    let isSameDirection = if (oldPositionSize > 0) then {
      _direction == DIR_LONG
    } else {
      _direction == DIR_SHORT
    }
    let expandExisting = !isNewPosition && isSameDirection
    let isAdd = _direction == DIR_LONG
    
    let (
      newPositionSize,
      newPositionRemainMargin,
      newPositionOpenNotional,
      newPositionLatestCPF,
      baseAssetReserveAfter,
      quoteAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInterestNotionalAfter,
      totalLongAfter,
      totalShortAfter
    ) = if (isNewPosition || expandExisting) then {
      let openNotional = muld(_amount, _leverage)
      let ( 
        amountBaseAssetBought,
        quoteAssetReserveAfter, 
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter
      ) = swapInput(isAdd, openNotional)
       
      if (_minBaseAssetAmount != 0 && abs(amountBaseAssetBought) < _minBaseAssetAmount) then {
         throw("Limit error: " + abs(amountBaseAssetBought).toString() + " < " + _minBaseAssetAmount.toString())
       } else {
        let newPositionSize = oldPositionSize + amountBaseAssetBought
        let increaseMarginRequirement = divd(openNotional, _leverage)
        let (remainMargin, x1, x2) =
          calcRemainMarginWithFundingPayment(
                oldPositionSize, 
                oldPositionMargin, 
                oldPositionLstUpdCPF, 
                increaseMarginRequirement
            )
        
        (
          newPositionSize, # positionSize
          remainMargin, # remainMargin
          oldPositionOpenNotional + openNotional, # pon
          latestCumulativePremiumFraction(newPositionSize), # latestCPF
          baseAssetReserveAfter, # baseAssetReserveAfter
          quoteAssetReserveAfter, # quoteAssetReserveAfter
          totalPositionSizeAfter, # totalPositionSizeAfter
          cumulativeNotionalAfter, # cumulativeNotionalAfter
          openInterestNotional() + openNotional, # openInterestNotionalAfter
          totalLongPositionSize() + if (newPositionSize > 0) then abs(amountBaseAssetBought) else 0,
          totalShortPositionSize() + if (newPositionSize < 0) then abs(amountBaseAssetBought) else 0
        )
       }
    } else {
      let openNotional = muld(_amount, _leverage)
      let (oldPositionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(i.caller.toString(), PNL_OPTION_SPOT)
      if (oldPositionNotional > openNotional) then {
        throw("Use decreasePosition to decrease position size")
      } else {
        throw("Close position first")
      }
      
    }

    let feeToStakers = feeAmount / 2
    let feeToInsurance = feeAmount - feeToStakers
    
    strict stake = invoke(
      quoteAssetStaking(),
      "lockNeutrinoSP",
      [stakingAddress().toString(), ALL_FEES],
      [AttachedPayment(quoteAsset(), _amount)]
    )

    strict depositInsurance = invoke(
      insuranceAddress(),
      "deposit",
      [],
      [AttachedPayment(quoteAsset(), feeToInsurance)]
    )

    strict notifyFee = invoke(
      minerAddress(),
      "notifyFees",
      [i.caller.toString(), feeAmount],
      []
    )

    strict notifyNotional = invoke(
      minerAddress(),
      "notifyNotional",
      [i.caller.toString(), newPositionOpenNotional],
      []
    )
    
    updatePosition(
      i.caller.toString(),
      newPositionSize,
      newPositionRemainMargin,
      newPositionOpenNotional,
      newPositionLatestCPF
    ) 
    ++
    updateAmm(
      quoteAssetReserveAfter,
      baseAssetReserveAfter,
      totalPositionSizeAfter,
      cumulativeNotionalAfter,
      openInterestNotionalAfter,
      totalLongAfter,
      totalShortAfter
    )
    ++
    transferFee(feeToStakers)
    ++
    updateBalance(cbalance() + _amount)
  }
}

@Callable(i)
func addMargin() = {
  let _rawAmount = i.payments[0].amount
  if (
    i.payments[0].assetId != quoteAsset()
    || !requireOpenPosition(i.caller.toString())
    || !initialized()
    || paused()
  ) then {
    throw("Invalid addMargin parameters")
  } else {
    let feeAmount = muld(_rawAmount, fee())
    let _amount = _rawAmount - feeAmount

    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())

    let feeToStakers = feeAmount / 2
    let feeToInsurance = feeAmount - feeToStakers
    
    strict stake = invoke(
      quoteAssetStaking(),
      "lockNeutrinoSP",
      [stakingAddress().toString(), ALL_FEES],
      [AttachedPayment(quoteAsset(), _amount)]
    )

    strict depositInsurance = invoke(
      insuranceAddress(),
      "deposit",
      [],
      [AttachedPayment(quoteAsset(), feeToInsurance)]
    )

    strict notifyFee = invoke(
      minerAddress(),
      "notifyFees",
      [i.caller.toString(), feeAmount],
      []
    )

    updatePosition(
      i.caller.toString(),
      oldPositionSize,
      oldPositionMargin + _amount,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    )
    ++
    transferFee(feeToStakers)
    ++
    updateBalance(cbalance() + _amount)
  }
}

@Callable(i)
func removeMargin(
  _amount: Int
) = {
  if (
    _amount <= 0
    || !requireOpenPosition(i.caller.toString())
    || !initialized()
    || paused()
  ) then {
    throw("Invalid removeMargin parameters")
  } else {
    let (
      oldPositionSize,
      oldPositionMargin,
      oldPositionOpenNotional,
      oldPositionLstUpdCPF
    ) = getPosition(i.caller.toString())

    let marginDelta = -_amount
    let (remainMargin, badDebt) =
      calcRemainMarginWithFundingPayment(
        oldPositionSize,
        oldPositionMargin,
        oldPositionLstUpdCPF,
        marginDelta
    )
    if (badDebt != 0) then {
      throw("Invalid removed margin amount")
    } else {
      let marginRatio = calcMarginRatio(remainMargin, badDebt, oldPositionOpenNotional)
      if (!requireMoreMarginRatio(marginRatio, initMarginRatio(), true)) then {
        throw("Too much margin removed: " + marginRatio.toString() + " < " + initMarginRatio().toString())
      } else {
        strict unstake = invoke(
          quoteAssetStaking(),
          "unlockNeutrino",
          [_amount, quoteAsset().toBase58String()],
          []
        )
        
        updatePosition(
          i.caller.toString(),
          oldPositionSize,
          remainMargin,
          oldPositionOpenNotional,
          latestCumulativePremiumFraction(oldPositionSize)
        )
        ++
        withdraw(i.caller, _amount)
        ++
        updateBalance(cbalance() - _amount)
      }
    }
  }
}

@Callable(i)
func closePosition() = {
    if (
      !requireOpenPosition(i.caller.toString())
      || !initialized()
      || paused()
  ) then {
    throw("Invalid closePosition parameters")
  } else {
    let (
          x1,
          positionBadDebt,
          realizedPnl,
          marginToVault,
          quoteAssetReserveAfter,
          baseAssetReserveAfter,
          totalPositionSizeAfter,
          cumulativeNotionalAfter,
          openInterestNotionalAfter,
          x2,
          totalLongAfter,
          totalShortAfter
    ) = internalClosePosition(i.caller.toString(), true)

    if (positionBadDebt > 0) then {
      throw("Unable to close position with bad debt")
    } else {
      let withdrawAmount = abs(marginToVault)

      let ammBalance = cbalance() - withdrawAmount
      let (ammNewBalance, getFromInsurance) = if (ammBalance < 0) then {
        (0, abs(ammBalance))
      } else {
        (ammBalance, 0)
      }

      strict x = if (getFromInsurance > 0) then {
        strict withdrawInsurance = invoke(
          insuranceAddress(),
          "withdraw",
          [getFromInsurance],
          []
        )
        []
      } else {
        []
      }

      strict unstake = invoke(
        quoteAssetStaking(),
        "unlockNeutrino",
        [withdrawAmount - getFromInsurance, quoteAsset().toBase58String()],
        []
      )

      strict notifyNotional = invoke(
        minerAddress(),
        "notifyNotional",
        [i.caller.toString(), 0],
        []
      )
      
      deletePosition(i.caller.toString()) 
      ++ 
      updateAmm(
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter,
        openInterestNotionalAfter,
        totalLongAfter,
        totalShortAfter
      )
      ++
      withdraw(i.caller, withdrawAmount)
      ++
      updateBalance(ammNewBalance)
    }
  }
}

@Callable(i)
func liquidate(_trader: String) = {
  # If market (future) price and index price diverge a lot, use index price to compute
  # liquidation margin. That provides additional safety layer for traders
  #
  let spotMarginRatio = getMarginRatioByOption(_trader, PNL_OPTION_SPOT)
  let marginRatio = if (isOverFluctuationLimit()) then {
    let oracleMarginRatio = getMarginRatioByOption(_trader, PNL_OPTION_ORACLE)
    vmax(spotMarginRatio, oracleMarginRatio)
  } else {
    spotMarginRatio
  }
  if (
    !requireMoreMarginRatio(marginRatio, maintenanceMarginRatio(), false)
    || !requireOpenPosition(_trader)
    || !initialized()
    || paused()
  ) then {
    throw("Unable to liquidate")
  } else {
    if (
      # This check guarantees no bad debt, because bad debt can happen only when
      # spotMarginRatio < 0, and liquidationFeeRatio > 0
      # TODO: Partial Liquidation Ratio
      spotMarginRatio > liquidationFeeRatio()
      && partialLiquidationRatio() > 0
      && partialLiquidationRatio() < DECIMAL_UNIT
    ) then {
      # Liquidate position partially by basically doing decrease position
      let (
        oldPositionSize,
        oldPositionMargin,
        oldPositionOpenNotional,
        oldPositionLstUpdCPF
      ) = getPosition(_trader)

      let _direction = if (oldPositionSize > 0) then DIR_SHORT else DIR_LONG
      let isAdd = _direction == DIR_LONG
      
      let exchangedQuoteAssetAmount = getPartialLiquidationAmount(_trader, oldPositionSize)
      let (oldPositionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, PNL_OPTION_SPOT)

      let ( 
          exchangedPositionSize, 
          quoteAssetReserveAfter, 
          baseAssetReserveAfter,
          totalPositionSizeAfter,
          cumulativeNotionalAfter
        ) = swapInput(isAdd, exchangedQuoteAssetAmount)
      
      # Realize a certain percent of position loss
      let realizedPnl = divd(muld(unrealizedPnl, abs(exchangedPositionSize)), abs(oldPositionSize))
      let (remainMargin, badDebt, fundingPayment) = 
          calcRemainMarginWithFundingPayment(
              oldPositionSize, 
              oldPositionMargin, 
              oldPositionLstUpdCPF, 
              realizedPnl
          )
      let unrealizedPnlAfter = unrealizedPnl - realizedPnl
      let remainOpenNotional = if (oldPositionSize > 0) then {
        oldPositionNotional - exchangedQuoteAssetAmount - unrealizedPnlAfter
      } else {
        unrealizedPnlAfter + oldPositionNotional - exchangedQuoteAssetAmount
      }

      # Liquidator get a certain (liquidationFeeRatio) percentage from a total position
      #
      let liquidationPenalty = muld(exchangedQuoteAssetAmount, liquidationFeeRatio())
      let feeToLiquidator = liquidationPenalty / 2
      let feeToInsurance = liquidationPenalty - feeToLiquidator

      let newPositionMargin = remainMargin - liquidationPenalty
      let newPositionSize = oldPositionSize + exchangedPositionSize
      let newPositionOpenNotional = abs(remainOpenNotional)
      let newPositionLstUpdCPF = latestCumulativePremiumFraction(newPositionSize)

      let openInterestNotionalAfter = openInterestNotional() - exchangedQuoteAssetAmount

      # Liquidating a position can incur bad debt. If AMM does not have enough funds to cover up bad debt
      # use Insurance Fund to cover it up
      let ammBalance = cbalance() - liquidationPenalty
      let (newAmmBalance, takeFromInsurance) = if (ammBalance < 0) then {
        (0, abs(ammBalance))
      } else {
        (ammBalance, 0)
      }

      strict x = if (takeFromInsurance > 0) then {
        strict withdrawInsurance = invoke(
          insuranceAddress(),
          "withdraw",
          [takeFromInsurance],
          []
        )
        []
      } else {
        []
      }

      strict unstake = invoke(
        quoteAssetStaking(),
        "unlockNeutrino",
        [liquidationPenalty - takeFromInsurance, quoteAsset().toBase58String()],
        []
      )

      strict depositInsurance = invoke(
        insuranceAddress(),
        "deposit",
        [],
        [AttachedPayment(quoteAsset(), feeToInsurance)]
      )

      strict notifyNotional = invoke(
        minerAddress(),
        "notifyNotional",
        [_trader, newPositionOpenNotional],
        []
      )

      updatePosition(
        _trader,
        newPositionSize,
        newPositionMargin,
        newPositionOpenNotional,
        newPositionLstUpdCPF
      ) 
      ++ 
      updateAmm(
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter,
        openInterestNotionalAfter,
        totalLongPositionSize() - if (newPositionSize > 0) then abs(exchangedPositionSize) else 0,
        totalShortPositionSize() - if (newPositionSize < 0) then abs(exchangedPositionSize) else 0
      )
      ++
      withdraw(i.caller, feeToLiquidator)
      ++
      updateBalance(newAmmBalance)
    } else {
      # Liquidate position fully
      let (
        x1,
        badDebt,
        x2,
        x3,
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter,
        openInterestNotionalAfter,
        exchangedQuoteAssetAmount,
        totalLongAfter,
        totalShortAfter
      ) = internalClosePosition(_trader, false)
      
      # Liquidator get a certain (liquidationFeeRatio) percentage from a total position
      #
      let liquidationPenalty = muld(exchangedQuoteAssetAmount, liquidationFeeRatio())
      let feeToLiquidator = liquidationPenalty / 2
      let feeToInsurance = liquidationPenalty - feeToLiquidator

      # Liquidating a position can incur bad debt. If AMM does not have enough funds to cover up bad debt
      # use Insurance Fund to cover it up
      let ammBalance = cbalance() - liquidationPenalty
      let (newAmmBalance, takeFromInsurance) = if (ammBalance < 0) then {
        (0, abs(ammBalance))
      } else {
        (ammBalance, 0)
      }

      strict x = if (takeFromInsurance > 0) then {
        strict withdrawInsurance = invoke(
          insuranceAddress(),
          "withdraw",
          [takeFromInsurance],
          []
        )
        []
      } else {
        []
      }

      strict unstake = invoke(
        quoteAssetStaking(),
        "unlockNeutrino",
        [liquidationPenalty - takeFromInsurance, quoteAsset().toBase58String()],
        []
      )

      strict depositInsurance = invoke(
        insuranceAddress(),
        "deposit",
        [],
        [AttachedPayment(quoteAsset(), feeToInsurance)]
      )

      strict notifyNotional = invoke(
        minerAddress(),
        "notifyNotional",
        [_trader, 0],
        []
      )

      deletePosition(_trader)
      ++ 
      updateAmm(
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        totalPositionSizeAfter,
        cumulativeNotionalAfter,
        openInterestNotionalAfter,
        totalLongAfter,
        totalShortAfter
      )
      ++
      withdraw(i.caller, feeToLiquidator)
      ++
      updateBalance(newAmmBalance)
    }
  }
}

@Callable(i)
func payFunding() = {
  let fundingBlockTimestamp = nextFundingBlockTimestamp()
  if (
    lastBlock.timestamp < fundingBlockTimestamp
    || !initialized()
    || paused()
  ) then {
    throw("Invalid funding block timestamp: " + lastBlock.timestamp.toString() + " < " + fundingBlockTimestamp.toString())
  } else {
    let underlyingPrice = getOracleTwapPrice()
    let spotTwapPrice = getTwapSpotPrice()
    let premium = spotTwapPrice - underlyingPrice
    let (shortPremiumFraction, longPremiumFraction) =
      # Handle special case: no shorts, or no longs. In this case funding in this period not exchanged.  
      #
      if (totalShortPositionSize() == 0 || totalLongPositionSize() == 0) then {
        (0, 0)
      } else {
        if (premium < 0) then {
          # underlyingPrice > spotTwapPrice, need to push spotTwapPrice UP, short pays the longs
          # how much to take from shorts this funding period
          let shortPremiumFraction = divd(muld(premium, fundingPeriodDecimal()), ONE_DAY)

          # how much longs will get from shorts total this funding period
          let longPremiumFraction = divd(muld(shortPremiumFraction, totalShortPositionSize()), totalLongPositionSize())
          (shortPremiumFraction, longPremiumFraction)
        } else {
          # underlyingPrice < spotTwapPrice, need to push spotTwapPrice DOWN, longs pays the shorts
          # how much to take from longs this funding period
          let longPremiumFraction = divd(muld(premium, fundingPeriodDecimal()), ONE_DAY)

          # how much shorts will get from longs total this funding period
          let shortPremiumFraction = divd(muld(longPremiumFraction, totalLongPositionSize()), totalShortPositionSize())
          (shortPremiumFraction, longPremiumFraction)
        }
      }
    
    updateFunding(
      fundingBlockTimestamp + fundingPeriodSeconds(),
      latestLongCumulativePremiumFraction() + longPremiumFraction,
      latestShortCumulativePremiumFraction() + shortPremiumFraction,
      divd(longPremiumFraction, underlyingPrice),
      divd(shortPremiumFraction, underlyingPrice)
    )
  }
}

@Callable(i)
func v_get(_trader: String) = {
  let (x1, x2, x3, x4) = internalClosePosition(_trader, false)
  throw(s(x2) + s(x3) + s(x4) + s(getMarginRatio(_trader)))
}

@Callable(i)
func view_calcRemainMarginWithFundingPayment(_trader: String) = {
    let (
      positionSize,
      positionMargin,
      pon,
      positionLstUpdCPF
    ) = getPosition(_trader)
    let (positionNotional, unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(_trader, PNL_OPTION_SPOT)
    let (remainMargin, badDebt, fundingPayment) = calcRemainMarginWithFundingPayment(
        positionSize,
        positionMargin,
        positionLstUpdCPF,
        unrealizedPnl
    )
    throw(
      s(remainMargin) 
      + s(fundingPayment) 
      + s(getMarginRatio(_trader))
      + s(unrealizedPnl)
      + s(badDebt)
      + s(positionNotional)
    )
}

@Callable(i)
func forceMoveAsset(_trader: String, _amount: Int) = {
  if (
    addressFromPublicKey(adminPublicKey()) != i.caller
    || _amount < 0
  ) then {
    throw("Invalid forceMoveAsset parameters")
  } else {
    strict unstake = invoke(
      quoteAssetStaking(),
      "unlockNeutrino",
      [_amount, quoteAsset().toBase58String()],
      []
    )
    
    withdraw(addressFromStringValue(_trader), _amount)
    ++
    updateBalance(cbalance() - _amount)
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey())