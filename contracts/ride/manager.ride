# This is an Fund Manager contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

let k_funds = "k_funds" # Amount of funds in a given token
let k_asset_manager_address = "k_asset_manager_address" # Address of manager adapter for a given asset

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress" # Address of Coordinator (base contract that keeps references to all infrastructure)
let k_orders_address = "k_orders_address"         # Order executor contract address
let k_vault_address = "k_vault_address"           # Address of vault contract
let k_amm = "k_amm"                               # Marks valid AMM addresses (for insurance)
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_staking_address = "k_staking_address"       # Address that stakes quote asset

# Global initialization state
let k_initialized = "k_initialized"               # If Insurance was properly initialized
let k_paused = "k_paused"                         # If all Manager operations are paused


##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func balanceOf(_assetId: String) = this.getInteger(toCompositeKey(k_funds, _assetId)).valueOrElse(0)
func coordinator() = addressFromString(this.getString(k_coordinatorAddress).valueOrErrorMessage("Coordinator not set Manager")).valueOrErrorMessage("Coordinator address invalid")
func vaultAddress() = addressFromString(coordinator().getString(k_vault_address).valueOrErrorMessage("Vault address not set")).valueOrErrorMessage("Vault address invalid")
func ordersAddress() = addressFromString(coordinator().getString(k_orders_address).valueOrErrorMessage("Orders address not set")).valueOrErrorMessage("Orders address invalid")
func adminAddress() = addressFromString(coordinator().getString(k_admin_address).valueOrErrorMessage("Admin address not set"))
func stakingAddress() = addressFromString(coordinator().getString(k_staking_address).valueOrErrorMessage("Staking address not set")).valueOrErrorMessage("Staking address invalid")

func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func paused() = this.getBoolean(k_paused).valueOrElse(false)

func assetManagerAddress(_assetId: String) = addressFromString(this.getString(toCompositeKey(k_asset_manager_address, _assetId)).valueOrErrorMessage("No asset manager for token " + _assetId)).valueOrErrorMessage("Invalid asset manager address for token " + _assetId)

func isWhitelist(_address: String) = {
  _address == stakingAddress().toString()
  || _address == vaultAddress().toString()
  || _address == ordersAddress().toString()
}

func updateFunds(_assetId: String, _value: Int) = {
  [
    IntegerEntry(toCompositeKey(k_funds, _assetId), _value)
  ]
}

@Callable(i)
func initialize(
  _coordinator: String,
  _quoteAssetId: String,
  _quoteAssetManager: String
) = {
  if (initialized() || i.caller != this) then {
    throw("Unable to initialize")
  } else {
    [
      StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString()),
      StringEntry(toCompositeKey(k_asset_manager_address, _quoteAssetId), addressFromStringValue(_quoteAssetManager).toString()),
      BooleanEntry(k_initialized, true)
    ]
  }
}

@Callable(i)
func unpause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid unpause params")
  } else {
    [
      BooleanEntry(k_paused, false)
    ]
  }
}

@Callable(i)
func pause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid pause params")
  } else {
    [
      BooleanEntry(k_paused, true)
    ]
  }
}

@Callable(i)
func addAssetManager(
  _assetId: String,
  _vaultAddress: String
) = {
  if (
    !initialized()
    || i.caller != adminAddress()
    || (
      getString(toCompositeKey(k_asset_manager_address, _assetId)).isDefined()
      && balanceOf(_assetId) > 0
    ) # do not allow overrides for now
  ) then {
    throw("Invalid addTokenVault params")
  } else {
    [
      StringEntry(toCompositeKey(k_asset_manager_address, _assetId), addressFromStringValue(_vaultAddress).toString())
    ]
  }
}

@Callable(i)
func withdraw(_assetId: String, _amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || !initialized()
    || paused()
    || _amount > balanceOf(_assetId)
  ) then {
    throw("Invalid withdraw params (manager) " + _amount.toString() + " > " + balanceOf(_assetId).toString())
  } else {
    strict unstake = invoke(
      assetManagerAddress(_assetId),
      "withdraw",
      [_assetId, _amount],
      []
    )

    let currentAssetBalance = balanceOf(_assetId) - _amount

    # Update state + transfer
    updateFunds(_assetId, currentAssetBalance)
    ++
    [
      ScriptTransfer(i.caller, _amount, fromBase58String(_assetId))
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  let _assetId = toBase58String(i.payments[0].assetId.valueOrErrorMessage("No assetId"))
  if (
    !initialized()
    || (!isWhitelist(i.caller.toString()) && i.caller != adminAddress())
    || paused()
    || i.payments.size() != 1
  ) then {
    throw("Invalid deposit params (manager)")
  } else {
    strict stake = invoke(
      assetManagerAddress(_assetId),
      "deposit",
      [],
      [AttachedPayment(i.payments[0].assetId, _amount)]
    )

    let currentAssetBalance = balanceOf(_assetId) + _amount

    updateFunds(_assetId, currentAssetBalance)
  }
}

@Callable(i)
func claimProfit(_assetId: String) = {
  if (
    !initialized()
    || i.caller != vaultAddress()
  ) then {
    throw("Invalid claimProfit params (manager)")
  } else {
     strict doClaimProfitResult = invoke(
      assetManagerAddress(_assetId),
      "claimProfit",
      [_assetId],
      []
    )

    let profit = 
      match (doClaimProfitResult) {
        case t: Int => t
        case _ => throw("Invalid claimProfit result type")
      }

    ([
      ScriptTransfer(i.caller, profit, fromBase58String(_assetId))
    ], profit)
  }
}

@Callable(i)
func view_claimProfit(_assetId: String) = {
  if (
    !initialized()
  ) then {
    throw("Invalid view_claimProfit params (manager)")
  } else {
     strict doClaimProfitResult = invoke(
      assetManagerAddress(_assetId),
      "claimProfit",
      [_assetId],
      []
    )

    let profit = 
      match (doClaimProfitResult) {
        case t: Int => t
        case _ => throw("Invalid claimProfit result type")
      }

    throw(balanceOf(_assetId).toString() + "," + (balanceOf(_assetId) + profit).toString() + "," + profit.toString())
  }
}

@Callable(i)
func migrate(_assetId: String) = {
  let _amount = balanceOf(_assetId)
  if (
    !initialized()
    || i.caller != adminAddress()
    || !paused()
  ) then {
    throw("Invalid migrate params (manager)")
  } else {
    strict unstake = invoke(
      this.getString("k_vires_address")
        .valueOrErrorMessage("No legacy vires address")
        .addressFromString()
        .valueOrErrorMessage("Invalid legacy vires address"),
      "withdraw",
      [_assetId, _amount],
      []
    )

    strict stake = invoke(
      assetManagerAddress(_assetId),
      "deposit",
      [],
      [AttachedPayment(fromBase58String(_assetId), _amount)]
    )

    [
      DeleteEntry("k_vires_address"),
      DeleteEntry("k_vires_vault")
    ]
  }
}

   
@Verifier(tx)
func verify() = {
  let coordinatorStr = this.getString(k_coordinatorAddress)
  if (coordinatorStr.isDefined()) then {
    let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
    if (admin.isDefined()) then {
      admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
    } else { 
      # Admin is not defined in coordinator, set admin first
      throw("unable to verify: admin not set in coordinator")
    }
  } else {
    # Coordinator not set, use native verify
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}