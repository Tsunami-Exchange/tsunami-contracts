# This is an Fund Manager contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

let k_funds = "k_funds" # Amount of funds in a given token
let k_vires_address = "k_vires_address" # Address of main vires dApp
let k_vires_vault = "k_vires_vault" # Vault by token
let k_asset_claimed_profit = "k_asset_claimed_profit" # Amount of profit claimed by asset

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress" # Address of Coordinator (base contract that keeps references to all infrastructure)
let k_insurance_address = "k_insurance_address"   # Address of insurance contract
let k_orders_address = "k_orders_address"         # Order executor contract address
let k_vault_address = "k_vault_address"           # Address of vault contract
let k_amm = "k_amm"                               # Marks valid AMM addresses (for insurance)
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_admin_public_key = "k_admin_public_key"     # Pubic key of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset (USDN in our case)
let k_quote_staking = "k_quote_staking"           # Address of quote asset staking contract (USDN staking in our case)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits

# Global initialization state
let k_initialized = "k_initialized"               # If Insurance was properly initialized

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func balanceOf(_assetId: String) = this.getInteger(toCompositeKey(k_funds, _assetId)).valueOrElse(0)
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
func insuranceAddress() = addressFromString(coordinator().getStringValue(k_insurance_address)).valueOrErrorMessage("Insurance not set")
func vaultAddress() = addressFromString(coordinator().getStringValue(k_vault_address)).valueOrErrorMessage("Vault not set") 
func ordersAddress() = addressFromString(coordinator().getStringValue(k_orders_address)).valueOrErrorMessage("Orders not set") 
func isAmm(_address: String) = getBoolean(coordinator(), k_amm.toCompositeKey(_address)).valueOrElse(false)
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
func adminPublicKey() = fromBase58String(coordinator().getStringValue(k_admin_public_key))
func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
func stakingAddress() = addressFromString(coordinator().getStringValue(k_staking_address)).valueOrErrorMessage("Staking not set")

func viresAddress() = addressFromString(this.getStringValue(k_vires_address)).valueOrErrorMessage("Vires not set")
func viresVault(_assetId: String) = addressFromString(this.getString(toCompositeKey(k_vires_vault, _assetId)).valueOrErrorMessage("No vault for token " + _assetId)).valueOrErrorMessage("Invalid address for token " + _assetId)

func isWhitelist(_address: String) = {
  isAmm(_address)
  || _address == insuranceAddress().toString()
  || _address == stakingAddress().toString()
  || _address == vaultAddress().toString()
  || _address == ordersAddress().toString()
}

func updateFunds(_assetId: String, _value: Int) = {
  [
    IntegerEntry(toCompositeKey(k_funds, _assetId), _value)
  ]
}

@Callable(i)
func initialize(
  _coordinator: String,
  _viresAddress: String,
  _quoteAssetId: String,
  _quoteAssetVault: String
) = {
  if (initialized()) then {
    throw("Already initialized")
  } else {
    [
      StringEntry(k_coordinatorAddress, _coordinator),
      StringEntry(k_vires_address, _viresAddress),
      StringEntry(toCompositeKey(k_vires_vault, _quoteAssetId), _quoteAssetVault),
      BooleanEntry(k_initialized, true)
    ]
  }
}

@Callable(i)
func addTokenVault(
  _assetId: String,
  _vaultAddress: String
) = {
  if (
    !initialized()
    || i.caller != adminAddress()
  ) then {
    throw("Invalid addTokenVault params")
  } else {
    [
      StringEntry(toCompositeKey(k_vires_vault, _assetId), _vaultAddress)
    ]
  }
}

@Callable(i)
func withdraw(_assetId: String, _amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || !initialized()
    || _amount > balanceOf(_assetId)
  ) then {
    throw("Invalid withdraw params (manager) " + _amount.toString() + " > " + balanceOf(_assetId).toString())
  } else {
    strict unstake = invoke(
      viresAddress(),
      "withdraw",
      [_assetId, _amount],
      []
    )

    let currentAssetBalance = balanceOf(_assetId) - _amount

    # Update state + transfer
    updateFunds(_assetId, currentAssetBalance)
    ++
    [
      ScriptTransfer(i.caller, _amount, fromBase58String(_assetId))
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  let _assetId = toBase58String(i.payments[0].assetId.valueOrErrorMessage("No assetId"))
  if (
    i.payments[0].assetId != quoteAsset()
    || !initialized()
    || (!isWhitelist(i.caller.toString()) && i.caller != adminAddress())
  ) then {
    throw("Invalid deposit params (manager)")
  } else {
    let vault = viresVault(_assetId)
    strict stake = invoke(
      viresAddress(),
      "deposit",
      [vault.toString(), false],
      [AttachedPayment(i.payments[0].assetId, _amount)]
    )

    let currentAssetBalance = balanceOf(_assetId) + _amount

    updateFunds(_assetId, currentAssetBalance)
  }
}

@Callable(i)
func claimProfit(_assetId: String) = {
  if (
    fromBase58String(_assetId) != quoteAsset()
    || !initialized()
    || i.caller != adminAddress()
  ) then {
    throw("Invalid claimProfit params")
  } else {
     strict currentAmount = invoke(
      viresVault(_assetId),
      "getCurrentTotals",
      [this.toString()],
      []
    )

    let currentAssetBalance = 
      match (currentAmount) {
        case t: (Int, Int, Int, Int) => t._3
        case _ => throw("Invalid currentAmount type")
      }

    let profit = currentAssetBalance - balanceOf(_assetId)

    strict unstake = invoke(
      viresAddress(),
      "withdraw",
      [_assetId, profit],
      []
    )

    [
      ScriptTransfer(i.caller, profit, fromBase58String(_assetId))
    ]
  }
}

@Callable(i)
func view_claimProfit(_assetId: String) = {
  if (
    fromBase58String(_assetId) != quoteAsset()
    || !initialized()
  ) then {
    throw("Invalid view_claimProfit params")
  } else {
     strict currentAmount = invoke(
      viresVault(_assetId),
      "getCurrentTotals",
      [this.toString()],
      []
    )

    let currentAssetBalance = 
      match (currentAmount) {
        case t: (Int, Int, Int, Int) => t._3
        case _ => throw("Invalid currentAmount type")
      }

    let profit = currentAssetBalance - balanceOf(_assetId)

    throw(balanceOf(_assetId).toString() + "," + currentAssetBalance.toString() + "," + profit.toString())
  }
}

   
@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey())