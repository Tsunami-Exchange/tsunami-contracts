# This is a Coordinator contract
# This holds all the core data in Tsunami
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####
let k_insurance_address = "k_insurance_address"   # Address of insurance contract (deprecated)
let k_vault_address = "k_vault_address"           # Address of vault contract
let k_admin_address = "k_admin_address"           # Address of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset
let k_reward_asset = "k_reward_asset"             # Address of reward asset (asset that will be used to pay stakers)
let k_swap_address = "k_swap_address"             # Address of swap proxy (exchange proxy)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits
let k_farming_address = "k_farming_address"       # Address that is used to farm more TSN
let k_prizes_address = "k_prizes_address"         # Address that is used to distribute prizes
let k_housekeeper_address = "k_housekeeper_address" # Address that is used to perform housekeeping
let k_amm = "k_amm"                               # Marks valid AMM addresses (for insurance)
let k_amm_data = "k_amm_data"                     # Contains data of AMM (for UI)
let k_governance_asset = "k_gov_asset"            # Governance (TSN) asset address
let k_miner_address = "k_miner_address"           # Liquidity mining contract address
let k_orders_address = "k_orders_address"         # Order executor contract address
let k_referral_address = "k_referral_address"     # Referral contract address
let k_manager_address = "k_manager_address"       # Fund manager address
let k_nft_manager_address = "k_nft_manager_address" # Fund manager address
let k_child = "k_child"                           # Child coordinators
let k_oracle = "k_oracle"                         # Address for JIT Oracle
let k_spot_address = "k_spot_address"             # Address for Spot trading

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address
func getAddressIfValid(address: String) = address.addressFromString().valueOrErrorMessage("Can't parse \"" + address + "\" as address").toString()

func isNoAdmin() = this.getString(k_admin_address) == unit
func admin() = addressFromStringValue(this.getString(k_admin_address).valueOrErrorMessage("Admin not defined"))

func isNoAdminOrAdmin(i: Invocation) = if ((isNoAdmin() && i.caller == this) || i.caller == admin()) then unit else throw("Only the Admin itself can invoke this function")
func isAdmin(i: Invocation) = if (i.caller == admin()) then unit else throw("Only the Admin itself can invoke this function")

@Callable(i)
func setAdmin(
  _adminAddress: String
) = isNoAdminOrAdmin(i).valueOrElse({
  strict address = addressFromStringValue(_adminAddress)
  [
    StringEntry(k_admin_address, address.toString())
  ]
})

@Callable(i)
func setInsuranceFund(
  _insuranceFund: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_insuranceFund)
  [
    StringEntry(k_insurance_address, address)
  ]
})

@Callable(i)
func setLiquidityMiner(
  _liquidityMiner: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_liquidityMiner)
  [
    StringEntry(k_miner_address, address)
  ]
})

@Callable(i)
func setOrders(
  _orders: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_orders)
  [
    StringEntry(k_orders_address, address)
  ]
})

@Callable(i)
func setReferral(
  _referral: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_referral)
  [
    StringEntry(k_referral_address, address)
  ]
})

@Callable(i)
func setFarming(
  _farming: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_farming)
  [
    StringEntry(k_farming_address, address)
  ]
})

@Callable(i)
func setManager(
  _manager: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_manager)
  [
    StringEntry(k_manager_address, address)
  ]
})

@Callable(i)
func setHousekeeper(
  _housekeeper: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_housekeeper)
  [
    StringEntry(k_housekeeper_address, address)
  ]
})

@Callable(i)
func setPrizes(
  _prizes: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_prizes)
  [
    StringEntry(k_prizes_address, address)
  ]
})

@Callable(i)
func setNftManager(
  _nftManager: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_nftManager)
  [
    StringEntry(k_nft_manager_address, address)
  ]
})

@Callable(i)
func setSwap(
  _swap: String
) = isAdmin(i).valueOrElse({
  strict address = getAddressIfValid(_swap)
  [
    StringEntry(k_swap_address, address)
  ]
})

@Callable(i)
func setQuoteAsset(
  _assetId: String
) = isAdmin(i).valueOrElse({
  [
    StringEntry(k_quote_asset, _assetId)
  ]
})

@Callable(i)
func setRewardAsset(
  _assetId: String
) = isAdmin(i).valueOrElse({
  [
    StringEntry(k_reward_asset, _assetId)
  ]
})

@Callable(i)
func setStakingAddress(
  _stakingAddress: String
) = isAdmin(i).valueOrElse({
  strict stakingAddress = getAddressIfValid(_stakingAddress)
  [
    StringEntry(k_staking_address, _stakingAddress)
  ]
})

@Callable(i)
func setSpotAddress(
  _spotAddress: String
) = isAdmin(i).valueOrElse({
  strict stakingAddress = getAddressIfValid(_spotAddress)
  [
    StringEntry(k_spot_address, _spotAddress)
  ]
})

@Callable(i)
func setVaultAddress(
  _vaultAddress: String
) = isAdmin(i).valueOrElse({
  strict exchangeAddress = getAddressIfValid(_vaultAddress)
  [
    StringEntry(k_vault_address, _vaultAddress)
  ]
})

@Callable(i)
func setOracleAddress(
  _oracleAddress: String
) = isAdmin(i).valueOrElse({
  strict oracleAddress = getAddressIfValid(_oracleAddress)
  [
    StringEntry(k_oracle, _oracleAddress)
  ]
})

@Callable(i)
func addChild(
  _childAddress: String
) = isAdmin(i).valueOrElse({
  let childAddress = getAddressIfValid(_childAddress)
  [
    BooleanEntry(k_child.toCompositeKey(_childAddress), true)
  ]
})

@Callable(i)
func addAmm(
  _ammAddress: String,
  _data: String
) = isAdmin(i).valueOrElse({
  let ammAddress = getAddressIfValid(_ammAddress)
  [
    BooleanEntry(k_amm.toCompositeKey(_ammAddress), true),
    StringEntry(k_amm_data.toCompositeKey(_ammAddress), _data)
  ]
})

@Callable(i)
func removeAmm(
  _ammAddress: String
) = isAdmin(i).valueOrElse({
  [
    DeleteEntry(k_amm.toCompositeKey(_ammAddress)),
    DeleteEntry(k_amm_data.toCompositeKey(_ammAddress))
  ]
})

@Callable(i)
func setGovernanceAsset(_assetId: String) = isAdmin(i).valueOrElse({
  let assetBytes = fromBase58String(_assetId)
  match assetInfo(assetBytes) {
    case asset:Asset => {
      if (asset.decimals != 8) then {
        throw("Invalid asset decimals, should be 8")
      } else {
        [
      StringEntry(k_governance_asset, _assetId)
    ]
      }
    }
    case _ => throw("Can't find asset")
  }
})

@Verifier(tx)
func verify() = {
  match this.getString(k_admin_address) {
    case verifier: String => verifier.addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
    case _ => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}