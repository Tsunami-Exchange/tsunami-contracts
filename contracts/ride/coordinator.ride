# This is a Coordinator contract
# This holds all the core data in Tsunami
#
{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####
let k_insurance_address = "k_insurance_address"   # Address of insurance contract
let k_admin_address = "k_admin_address"           # Address of admin account           
let k_admin_public_key = "k_admin_public_key"     # Pubic key of admin account
let k_quote_asset = "k_quote_asset"               # Address of quote asset (USDN in our case)
let k_quote_staking = "k_quote_staking"           # Address of quote asset staking contract (USDN staking in our case)
let k_staking_address = "k_staking_address"       # Address that should receive staking benefits
let k_amm = "k_amm"                               # Marks valid AMM addresses (for insurance)
let k_amm_data = "k_amm_data"                     # Contains data of AMM (for UI)
let k_governance_asset = "k_gov_asset"            # Governance (TSN) asset address
let k_miner_address = "k_miner_address"           # Liquidity mining contract address

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address
func getAddressIfValid(address: String) = address.addressFromString().valueOrErrorMessage("Can't parse \"" + address + "\" as address").toString()
func adminPublicKey() = getStringValue(this, k_admin_public_key)

func isNoAdmin() = this.getString(k_admin_address) == unit
func admin() = addressFromStringValue(this.getString(k_admin_address).valueOrErrorMessage("Admin not defined"))

func isNoAdminOrAdmin(i: Invocation) = if (isNoAdmin() || i.caller == admin()) then unit else throw("Only the Admin itself can invoke this function")
func isAdmin(i: Invocation) = if (i.caller == admin()) then unit else throw("Only the Admin itself can invoke this function")

@Callable(i)
func setAdmin(
  _adminPublicKey: String
) = isNoAdminOrAdmin(i).valueOrElse({
  let bytes = fromBase58String(_adminPublicKey)
  let address = addressFromPublicKey(bytes)
  [
    StringEntry(k_admin_address, address.toString()),
    StringEntry(k_admin_public_key, _adminPublicKey)
  ]
})

@Callable(i)
func setInsuranceFund(
  _insuranceFund: String
) = isAdmin(i).valueOrElse({
  let address = getAddressIfValid(_insuranceFund)
  [
    StringEntry(k_insurance_address, address)
  ]
})

@Callable(i)
func setLiquidityMiner(
  _liquidityMiner: String
) = isAdmin(i).valueOrElse({
  let address = getAddressIfValid(_liquidityMiner)
  [
    StringEntry(k_miner_address, address)
  ]
})

@Callable(i)
func setQuoteAsset(
  _assetId: String,
  _stakingAddress: String
) = isAdmin(i).valueOrElse({
  let stakingAddress = getAddressIfValid(_stakingAddress)
  [
    StringEntry(k_quote_asset, _assetId),
    StringEntry(k_quote_staking, _stakingAddress)
  ]
})

@Callable(i)
func setStakingAddress(
  _stakingAddress: String
) = isAdmin(i).valueOrElse({
  let stakingAddress = getAddressIfValid(_stakingAddress)
  [
    StringEntry(k_staking_address, _stakingAddress)
  ]
})

@Callable(i)
func addAmm(
  _ammAddress: String,
  _data: String
) = isAdmin(i).valueOrElse({
  let ammAddress = getAddressIfValid(_ammAddress)
  [
    BooleanEntry(k_amm.toCompositeKey(_ammAddress), true),
    StringEntry(k_amm_data.toCompositeKey(_ammAddress), _data)
  ]
})

@Callable(i)
func removeAmm(
  _ammAddress: String
) = isAdmin(i).valueOrElse({
  [
    DeleteEntry(k_amm.toCompositeKey(_ammAddress))
  ]
})

@Callable(i)
func setGovernanceAsset(_assetId: String) = isAdmin(i).valueOrElse({
  let assetBytes = fromBase58String(_assetId)
  match assetInfo(assetBytes) {
    case asset:Asset => {
      if (asset.decimals != 8) then {
        throw("Invalid asset decimals, should be 8")
      } else {
        [
      StringEntry(k_governance_asset, _assetId)
    ]
      }
    }
    case _ => throw("Can't find asset")
  }
})

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey().fromBase58String())