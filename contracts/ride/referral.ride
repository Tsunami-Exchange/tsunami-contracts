  {-# STDLIB_VERSION 6 #-}
  {-# CONTENT_TYPE DAPP #-}
  {-# SCRIPT_TYPE ACCOUNT #-}

  ##### Key constants #####
  let k_ref_link_owner = "k_ref_link_owner"
  let k_ref_link_owner_count = "k_ref_link_owner_count"
  let k_ref_owner_link = "k_ref_owner_link"
  let k_referrer = "k_referrer"
  let k_active = "k_active"
  let k_defaultFee = "k_defaultFee"
  let k_swapAddress = "k_swapAddress"

  let k_referrer_ref_count = "k_referrer_ref_count"
  let k_referrer_earned =  "k_referrer_earned"
  let k_referrer_claimed =  "k_referrer_claimed"

  # Initialization status
  let k_initialized = "k_initialized"

  # Coordinator
  let k_coordinatorAddress = "k_coordinatorAddress"
  let k_governance_asset = "k_gov_asset"
  let k_quote_asset = "k_quote_asset" 
  let k_admin_address = "k_admin_address"
  let k_amm = "k_amm"

  # Keys
  func toCompositeKey(_key: String, _address: String) = _key + "_" + _address
  
  func getReferrerLinkKey(_link: String) = {
    k_ref_link_owner + "_" + _link
  }

  func getReferrerKey(_trader: String) = {
    k_referrer + "_" + _trader
  }

  func getReferrerRefCountKey(_referrer: String) = {
    k_referrer_ref_count + "_" + _referrer
  }

  func getReferrerLinkCountKey(_referrer: String) = {
    k_ref_link_owner_count + "_" + _referrer
  }

  func getReferrerLinkKeyAt(_referrer: String, _linkId: Int) = {
    k_ref_owner_link + "_" + _referrer + "_" + _linkId.toString()
  }

  func getReferrerEarnedKey(_referrer: String) = {
    k_referrer_earned + "_" + _referrer
  }

  func getReferrerClaimedKey(_referrer: String) = {
    k_referrer_claimed + "_" + _referrer
  }

  func getActiveKey(_trader: String) = {
    k_active + "_" + _trader
  }

  ##### Coordinator constants #####
  func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
  func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
  func governanceAsset() = fromBase58String(coordinator().getStringValue(k_governance_asset))
  func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
  func isWhitelist(_address: String) = getBoolean(coordinator(), k_amm.toCompositeKey(_address)).valueOrElse(false)

  ##### Core constants #####

  let DECIMAL_UNIT = 1 * (10 * 10 * 10 * 10 * 10 * 10) # 10 ** 6

  ##### Helper functions #####
  func swapAddress() = addressFromString(this.getString(k_swapAddress).valueOrErrorMessage("Now swap address")).valueOrErrorMessage("Invalid swap address")

  func usdnFromDecimals(_amount: Int)  = _amount / 100
  func usdnToDecimals(_amount: Int)    = _amount * 100

  func divd(_x: Int, _y: Int) = fraction(_x, DECIMAL_UNIT, _y, HALFEVEN)
  func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMAL_UNIT, HALFEVEN)
  func abs(_x: Int) = if (_x > 0) then _x else -_x
  func minv(_x: Int, _y: Int) = if (_x > _y) then _y else _x

  ##### Accessor functions #####
  func int(k: String) = this.getInteger(k).valueOrErrorMessage("no value for " + k)
  func int0(k: String) = this.getInteger(k).valueOrElse(0)

  func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

  ##### Update functions #####

  ##### View functions #####
  func getLinkReferrer(_link: String) = {
    this.getString(getReferrerLinkKey(_link)).valueOrElse("")
  }

  func getReferrer(_trader: String) = {
    this.getString(getReferrerKey(_trader)).valueOrElse("")
  }

  func isReferral(_trader: String) = {
    getReferrer(_trader) != ""
  }

  func isFirstTime(_trader: String) = {
    this.getBoolean(getActiveKey(_trader)).valueOrElse(false) == false
  }

  func getDefaultFee() = int(k_defaultFee)

  func getReferrerRefCount(_referrer: String) = {
    this.getInteger(getReferrerRefCountKey(_referrer)).valueOrElse(0)
  }

  func getReferrerLinkCount(_referrer: String) = {
    this.getInteger(getReferrerLinkCountKey(_referrer)).valueOrElse(0)
  }

  func getReferrerEarned(_referrer: String) = {
    this.getInteger(getReferrerEarnedKey(_referrer)).valueOrElse(0)
  }

  func getReferrerClaimed(_referrer: String) = {
    this.getInteger(getReferrerClaimedKey(_referrer)).valueOrElse(0)
  }

  ##### Callable functions #####

  # This function creates a referral link for the caller. 
  # It takes the transaction ID and caller public key as inputs and uses them to 
  # generate a unique short link. It then stores the short link in the blockchain along 
  # with the caller's address. If the short link already exists, an error is thrown.
  @Callable(i)
  func createReferralLink() = {
    let raw = toBase58String(i.transactionId) + toBase58String(i.callerPublicKey)
    let bytes = raw.toBytes()
    let long = toBase58String(sha256(bytes))
    let short = long.take(10)
    let key = getReferrerLinkKey(short)
    let linkId = getReferrerLinkCount(i.caller.toString()) + 1
    if (this.getString(key).isDefined()) then {
      throw("Short link exists, try generating it again")
    } else {
      [
        StringEntry(getReferrerLinkKeyAt(i.caller.toString(), linkId), short),
        StringEntry(key, i.caller.toString())
      ]
    }
  }

  # This callable function allows users to accept payments with a referral link. 
  # It checks if the user is a referral or first time user, and if so, sends a fee to the 
  # referrer and marks the user as active. If the user is not a referral or first time user, 
  # the full payment is sent back.
  # 
  # @param _trader Trader using referral link
  # @param _refLink Referral link for trader
  # @notice Can only be called by AMM 
  @Callable(i)
  func acceptPaymentWithLink(_trader: String, _refLink: String) = {
    let _rawAmount = i.payments[0].amount

    let amm = i.caller.toString()
    if (
      !isWhitelist(amm)
      || !initialized()
    ) then {
      throw("Invalid acceptPaymentWithLink params")
    } else {
      # If trader is already someone's referral or first time interacting with platform
      let _isReferral = isReferral(_trader)
      let _isFirstTime = isFirstTime(_trader)
      if (_isReferral || _isFirstTime) then {
        if (_isReferral) then {
          # Existing referral. Just pay the referrer his fee and be done with it
          let referrer = getReferrer(_trader)
          let fee = getDefaultFee()
          let amountToReferrer = muld(_rawAmount, fee)

          strict beforeSwap = assetBalance(this, governanceAsset())

          strict doSwap = invoke(
            swapAddress(),
            "swap",
            [toBase58String(governanceAsset()), 0], # Want Gov Asset
            [AttachedPayment(quoteAsset(), amountToReferrer)] # In exchange for Quote Asset
          )

          strict afterSwap = assetBalance(this, governanceAsset())
          strict amountGovToReferrer = afterSwap - beforeSwap

          (
            [
              IntegerEntry(getReferrerEarnedKey(referrer), getReferrerEarned(referrer) + amountGovToReferrer),
              ScriptTransfer(i.caller, i.payments[0].amount - amountToReferrer, i.payments[0].assetId)
            ], 
            amountToReferrer
          )
        } else {
          # New user or new referral. Mark user as active in any case.
          let referrer = getLinkReferrer(_refLink)
          if (referrer == "" || referrer == _trader) then {
            # Mark user as active and be done with it
            (
              [
                ScriptTransfer(i.caller, i.payments[0].amount, i.payments[0].assetId),
                BooleanEntry(getActiveKey(_trader), true)
              ], 
              0
            )
          } else {
            # Register user as referral, mark as active and may the fee for referrer
            let fee = getDefaultFee()
            let amountToReferrer = muld(_rawAmount, fee)

            strict beforeSwap = assetBalance(this, governanceAsset())
            
            strict doSwap = invoke(
              swapAddress(),
              "swap",
              [toBase58String(governanceAsset()), 0], # Want Gov Asset
              [AttachedPayment(quoteAsset(), amountToReferrer)] # In exchange for Quote Asset
            )

            strict afterSwap = assetBalance(this, governanceAsset())
            strict amountGovToReferrer = afterSwap - beforeSwap
            
            (
              [
                IntegerEntry(getReferrerRefCountKey(referrer), getReferrerRefCount(referrer) + 1),
                IntegerEntry(getReferrerEarnedKey(referrer), getReferrerEarned(referrer) + amountGovToReferrer),
                StringEntry(getReferrerKey(_trader), referrer),
                BooleanEntry(getActiveKey(_trader), true),
                ScriptTransfer(i.caller, i.payments[0].amount -  amountToReferrer, i.payments[0].assetId)
              ], 
              amountToReferrer
            )
          }
        }
      } else {
        # Not a referral and not a first time trader - send full payment back
        #
        (
          [
            ScriptTransfer(i.caller, i.payments[0].amount, i.payments[0].assetId)
          ],
          0 # Zero fee taken
        )
      }
    }
  }

  # This function is used to accept payments from traders.
  # It checks if the trader is already someone's referral or is interacting with 
  # the platform for the first time. If the trader is an existing referral, 
  # it pays the referrer a fee in exchange for the quote asset. 
  # If the trader is not a referral, it sends the full payment back to the caller.
  # This trader will no become anyone's referral after first interaction with platform.
  @Callable(i)
  func acceptPayment(_trader: String) = {
    let _rawAmount = i.payments[0].amount
    let amm = i.caller.toString()
    if (
      !isWhitelist(amm)
      || !initialized()
    ) then {
      throw("Invalid acceptPayment params")
    } else {
      # If trader is already someone's referral or first time interacting with platform
      let _isReferral = isReferral(_trader)
      if (_isReferral) then {
        # Existing referral. Just pay the referrer his fee and be done with it
        let referrer = getReferrer(_trader)
        let fee = getDefaultFee()
        let amountToReferrer = muld(_rawAmount, fee)

        strict beforeSwap = assetBalance(this, governanceAsset())

        strict doSwap = invoke(
          swapAddress(),
          "swap",
          [toBase58String(governanceAsset()), 0], # Want Gov Asset
          [AttachedPayment(quoteAsset(), amountToReferrer)] # In exchange for Quote Asset
        )

        strict afterSwap = assetBalance(this, governanceAsset())
        strict amountGovToReferrer = afterSwap - beforeSwap
        
        (
          [
            IntegerEntry(getReferrerEarnedKey(referrer), getReferrerEarned(referrer) + amountGovToReferrer),
            ScriptTransfer(i.caller, i.payments[0].amount -  amountToReferrer, i.payments[0].assetId)
          ], 
          amountToReferrer
        )
      } else {
        # Not a referral and not a first time trader - send full payment back
        #
        (
          [
            ScriptTransfer(i.caller, i.payments[0].amount, i.payments[0].assetId)
          ],
          0 # Zero fee taken
        )
      }
    }
  }

  # This function allows the caller to claim rewards earned from referrals. 
  # It first calculates the total rewards earned by the caller and subtracts 
  # the total rewards already claimed. If the difference is greater than zero, 
  # the caller's rewards are updated in the ledger and the caller is transferred 
  # the amount of rewards they can claim. Otherwise, an error is thrown.
  @Callable(i)
  func claimRewards() = {
    let referrer = i.caller.toString()
    let totalRewards = getReferrerEarned(referrer)
    let totalClaimed = getReferrerClaimed(referrer)
    let toClaim = totalRewards - totalClaimed

    if (toClaim > 0) then {
      [
        IntegerEntry(getReferrerClaimedKey(referrer), getReferrerClaimed(referrer) + toClaim),
        ScriptTransfer(i.caller, toClaim, governanceAsset())
      ]
    } else {
      throw("Nothing to claim")
    }
  }

  @Callable(i)
  func initialize(
    _coordinator: String,
    _defaultFee: Int,
    _swapAddress: String
  ) = {
    if (initialized() || i.caller != this) then {
      throw("Unable to initialize")
    } else {
      [
        StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString()),
        StringEntry(k_swapAddress, addressFromStringValue(_swapAddress).toString()),
        IntegerEntry(k_defaultFee, _defaultFee),
        BooleanEntry(k_initialized, true)
      ]
    }
  }

  @Callable(i)
  func setSwapAddress(
    _swapAddress: String
  ) = {
    if (i.caller != adminAddress()) then {
      throw("Invalid setSwapAddress params")
    } else {
      [
        StringEntry(k_swapAddress, addressFromStringValue(_swapAddress).toString())
      ]
    }
  }

  @Verifier(tx)
  func verify() = {
    let coordinatorStr = this.getString(k_coordinatorAddress)
    if (coordinatorStr.isDefined()) then {
      let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
      if (admin.isDefined()) then {
        admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
      } else { 
        # Admin is not defined in coordinator, set admin first
        throw("unable to verify: admin not set in coordinator")
      }
    } else {
      # Coordinator not set, use native verify
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
  }