  {-# STDLIB_VERSION 6 #-}
  {-# CONTENT_TYPE DAPP #-}
  {-# SCRIPT_TYPE ACCOUNT #-}

  # Initialization status
  let k_initialized = "k_initialized"

  # Coordinator
  let k_coordinatorAddress = "k_coordinatorAddress"
  let k_staking_address = "k_staking_address"
  let k_farming_address = "k_farming_address"
  let k_vault_address = "k_vault_address"
  let k_admin_address = "k_admin_address"  

  
  func strToList(_str: String) = if (_str == "") then [] else _str.split_4C(",") 

  ##### Coordinator constants #####
  func coordinator() = addressFromString(this.getString(k_coordinatorAddress).valueOrErrorMessage("Coordinator not set HC")).valueOrErrorMessage("Coordinator address invalid")
  func adminAddress() = addressFromString(coordinator().getString(k_admin_address).valueOrErrorMessage("Admin address not set"))
  func stakingAddress() = addressFromString(coordinator().getString(k_staking_address).valueOrErrorMessage("Staking address not set")).valueOrErrorMessage("Staking address invalid")
  func farmingAddress() = addressFromString(coordinator().getString(k_farming_address).valueOrErrorMessage("Farming address not set")).valueOrErrorMessage("Farming address invalid")
  func vaultAddress() = addressFromString(coordinator().getString(k_vault_address).valueOrErrorMessage("Vault address not set")).valueOrErrorMessage("Vault address invalid")

  func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

  @Callable(i)
  func initialize(
    _coordinator: String
  ) = {
    if (initialized() || i.caller != this) then {
      throw("Unable to initialize")
    } else {
      [
        StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString()),
        BooleanEntry(k_initialized, true)
      ]
    }
  }

  @Callable(i)
  func performHousekeeping(
    _vault: Boolean,
    _farming: Boolean,
    _staking: Boolean,
    _payFunding: String,
    _spotVaults: String
  ) = {

    strict doAckRewardsStaking = if (_staking) then {
       invoke(
        stakingAddress(),
        "ackRewards",
        [],
        []
      )
    } else {
      []
    }

    strict doAckRewardsFarming = if (_farming) then { 
      invoke(
        farmingAddress(),
        "ackRewards",
        [],
        []
      ) 
    } else {
      []
    }

    strict doAckRewardsVault = if (_vault) then {  
      invoke(
        vaultAddress(),
        "ackRewards",
        [],
        []
      )
    } else {
      []
    }

    let amms = _payFunding.strToList()
    func compute(_acc: List[StringEntry], _ammData: String) = {
      let parts = _ammData.split_4C("@")
      let amm = parts[0]
      let priceUpdate = if (parts.size() > 1) then parts[1] else ""
      strict doPayFunding = invoke(
        addressFromStringValue(amm),
        "payFunding",
        [priceUpdate],
        []
      )

      _acc
    }

    strict doCallAmms = FOLD<10>(amms, [], compute) # Max 10 AMM's

    let vaults = _spotVaults.strToList()
    func compute2(_acc: List[StringEntry], _vault: String) = {
      strict doPayFunding = invoke(
        addressFromStringValue(_vault),
        "ackRewards",
        [],
        []
      )
      _acc
    }

    strict doCallVaults = FOLD<5>(vaults, [], compute2) # Max 5 AMM's

    []
  }


  @Verifier(tx)
  func verify() = {
    let coordinatorStr = this.getString(k_coordinatorAddress)
    if (coordinatorStr.isDefined()) then {
      let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
      if (admin.isDefined()) then {
        admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
      } else { 
        # Admin is not defined in coordinator, set admin first
        throw("unable to verify: admin not set in coordinator")
      }
    } else {
      # Coordinator not set, use native verify
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
  }