  {-# STDLIB_VERSION 6 #-}
  {-# CONTENT_TYPE DAPP #-}
  {-# SCRIPT_TYPE ACCOUNT #-}

  # Initialization status
  let k_initialized = "k_initialized"

  # Coordinator
  let k_coordinatorAddress = "k_coordinatorAddress"
  let k_staking_address = "k_staking_address"
  let k_farming_address = "k_farming_address"
  let k_governance_asset = "k_gov_asset"
  let k_quote_asset = "k_quote_asset" 
  let k_admin_public_key = "k_admin_public_key" 
  let k_admin_address = "k_admin_address"  

  
  func strToList(_str: String) = if (_str == "") then [] else _str.split(",") 

  ##### Coordinator constants #####
  func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
  func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
  func adminPublicKey() = fromBase58String(coordinator().getStringValue(k_admin_public_key))
  func governanceAsset() = fromBase58String(coordinator().getStringValue(k_governance_asset))
  func quoteAsset() = fromBase58String(coordinator().getStringValue(k_quote_asset))
  func stakingAddress() = addressFromString(coordinator().getStringValue(k_staking_address)).valueOrErrorMessage("Staking not set")
  func farmingAddress() = addressFromString(coordinator().getStringValue(k_farming_address)).valueOrErrorMessage("Staking not set")

  func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

  @Callable(i)
  func initialize(
    _coordinator: String
  ) = {
    if (initialized()) then {
      throw("Already initialized")
    } else {
      [
        StringEntry(k_coordinatorAddress, _coordinator),
        BooleanEntry(k_initialized, true)
      ]
    }
  }

  @Callable(i)
  func performHousekeeping(
    _payFunding: String
  ) = {
    strict doAckRewardsStaking = invoke(
      stakingAddress(),
      "ackRewards",
      [],
      []
    )

    strict doAckRewardsFarming = invoke(
      farmingAddress(),
      "ackRewards",
      [],
      []
    )

    let amms = _payFunding.strToList()
    func compute(_acc: List[StringEntry], _amm: String) = {
      strict doPayFunding = invoke(
        addressFromStringValue(_amm),
        "payFunding",
        [],
        []
      )

      _acc
    }
    FOLD<20>(amms, [], compute) # Max 20 AMM's
  }


  @Verifier(tx)
  func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], adminPublicKey())