# This is an Fund Manager contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

let k_funds = "k_funds" # Amount of funds in a given token

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress" # Address of Coordinator (base contract that keeps references to all infrastructure)
let k_manager_address = "k_manager_address"       # Manager contract address
let k_admin_address = "k_admin_address"           # Address of admin account           

# Global initialization state
let k_initialized = "k_initialized"               # If Insurance was properly initialized

##### View functions #####
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

func balanceOf(_assetId: String) = this.getInteger(toCompositeKey(k_funds, _assetId)).valueOrElse(0)
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set Simple Asset Manager")
func managerAddress() = addressFromString(coordinator().getString(k_manager_address).valueOrErrorMessage("Manager not set")).valueOrErrorMessage("Manager not set") 
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))

func isWhitelist(_address: String) = {
  _address == managerAddress().toString()
}

func updateFunds(_assetId: String, _value: Int) = {
  [
    IntegerEntry(toCompositeKey(k_funds, _assetId), _value)
  ]
}

@Callable(i)
func initialize(
  _coordinator: String
) = {
  if (initialized() || i.caller != this) then {
    throw("Unable to initialize")
  } else {
    [
      StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString()),
      BooleanEntry(k_initialized, true)
    ]
  }
}

@Callable(i)
func withdraw(_assetId: String, _amount: Int) = {
  if (
    !isWhitelist(i.caller.toString()) 
    || !initialized()
    || _amount > balanceOf(_assetId)
  ) then {
    throw("Invalid withdraw params (simple asset manager) " + _amount.toString() + " > " + balanceOf(_assetId).toString())
  } else {
    let currentAssetBalance = balanceOf(_assetId) - _amount

    # Update state + transfer
    updateFunds(_assetId, currentAssetBalance)
    ++
    [
      ScriptTransfer(i.caller, _amount, fromBase58String(_assetId))
    ]
  }
}

@Callable(i)
func deposit() = {
  let _amount = i.payments[0].amount
  let _assetId = toBase58String(i.payments[0].assetId.valueOrErrorMessage("No assetId"))
  if (
    !initialized()
    || (!isWhitelist(i.caller.toString()) && i.caller != adminAddress())
  ) then {
    throw("Invalid deposit params (simple asset manager)")
  } else {
    let currentAssetBalance = balanceOf(_assetId) + _amount

    updateFunds(_assetId, currentAssetBalance)
  }
}

@Callable(i)
func claimProfit(_assetId: String) = {
  if (
    !initialized()
    || i.caller != managerAddress()
  ) then {
    throw("Invalid claimProfit params (simple asset manager)")
  } else {
    ([
      ScriptTransfer(i.caller, 0, fromBase58String(_assetId))
    ], 0)
  }
}

@Callable(i)
func view_claimProfit(_assetId: String) = {
  if (
    !initialized()
  ) then {
    throw("Invalid view_claimProfit params (simple asset manager)")
  } else {
    let profit = 0
    throw(balanceOf(_assetId).toString() + "," + balanceOf(_assetId).toString() + "," + profit.toString())
  }
}

   
  @Verifier(tx)
  func verify() = {
    let coordinatorStr = this.getString(k_coordinatorAddress)
    if (coordinatorStr.isDefined()) then {
      let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
      if (admin.isDefined()) then {
        admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
      } else { 
        # Admin is not defined in coordinator, set admin first
        throw("unable to verify: admin not set in coordinator")
      }
    } else {
      # Coordinator not set, use native verify
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
  }