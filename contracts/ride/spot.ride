# This is a vAMM + Exchange contract
#
{-# STDLIB_VERSION 6 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

##### Key constants #####

# Global initialization state
let k_initialized = "k_initialized"                       # If AMM was properly initialized
let k_paused = "k_paused"                                 # If all AMM operations are paused

# Exchange settings
let k_fee = "k_fee"                                       # Exchange fee. Default is 0.3%. 1/3 goes to stakers, 2/3 goes to vault
let k_rebate = "k_rebate"                                 # Max rebate of exchange fee. Default is 0.1%.

# Coordinator
let k_coordinatorAddress = "k_coordinatorAddress"         # Address of Coordinator (base contract that keeps references to all infrastructure)

# Vault
let k_excessBalance = "k_excessBalance"
let k_freeBalance = "k_freeBalance"

# Own keys
let k_amm = "k_amm"
let k_vault = "k_vault"
let k_amm_data = "k_amm_data"
let k_asset_vault = "k_asset_vault"
let k_asset_amm = "k_asset_amm"

# Coordinator keys
let k_admin_address = "k_admin_address"           # Address of admin account

func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

##### Coordinator data ##### 
func coordinator() = addressFromString(this.getStringValue(k_coordinatorAddress)).valueOrErrorMessage("Coordinator not set")
func adminAddress() = addressFromString(coordinator().getStringValue(k_admin_address))
func isAdmin(i: Invocation) = if (i.caller == adminAddress()) then unit else throw("Only the Admin itself can invoke this function")
func getAddressIfValid(address: String) = address.addressFromString().valueOrErrorMessage("Can't parse \"" + address + "\" as address").toString()

##### Core constants #####
let DECIMAL_NUMBERS   = 6
let DECIMAL_UNIT      = 1 * (10 * 10 * 10 * 10 * 10 * 10)

##### Helper functions #####

func s(_x: Int) = _x.toString() + ","

func divd(_x: Int, _y: Int) = fraction(_x, DECIMAL_UNIT, _y, HALFEVEN)
func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMAL_UNIT, HALFEVEN)
func abs(_x: Int) = if (_x > 0) then _x else -_x
func vmax(_x: Int, _y: Int) = if (_x >= _y) then _x else _y
func vmin(_x: Int, _y: Int) = if (_x <= _y) then _x else _y

##### Accessor functions #####
func int(k: String) = this.getInteger(k).valueOrErrorMessage("no value for " + k)

func fee() = int(k_fee)
func feeRebate() = int(k_rebate)

func getMarket(_assetId: String) = addressFromString(
  this.getString(k_asset_amm.toCompositeKey(_assetId)).valueOrElse("No market for: " + _assetId)
).valueOrErrorMessage("Invalid market address for: " + _assetId)

func getVault(_assetId: String) = addressFromString(
  this.getString(k_asset_vault.toCompositeKey(_assetId)).valueOrElse("No vault for: " + _assetId)
).valueOrErrorMessage("Invalid vault address for: " + _assetId)

func getExcessBalance(_vault: Address) = {
  _vault.getInteger(k_excessBalance).valueOrElse(0)
}

func getFreeBalance(_vault: Address) = {
  _vault.getInteger(k_freeBalance).valueOrElse(0)
}

func getImbalanceCostUSD(_vault: Address, _amm: Address, _decimals: Int, _amount: Int) = {
  # Note, _amount is always in _decimals, and _vault operates in 10^8, so adjust first
  let amount = if (_decimals == 8) then _amount
               else if (_decimals == 6) then _amount * 100 
               else throw("Invalid decimals")

  let oldImbalance = getExcessBalance(_vault) # This is in 10^8 always
  let newImbalance = oldImbalance + amount
  let imbalanceDeltaInAmmDecimals = (abs(newImbalance) - abs(oldImbalance)) / 100
  
  # Note, imbalanceDeltaInAmmDecimals can be positive (imbalance increase) 
  # or negative (imbalance decrease). But it's in token. Multiply it by price to get
  # imbalance value in USD
  #
  strict priceR = invoke(_amm, "computeSpotPrice", [], [])
  let price = match (priceR) {
    case t: Int => t
    case _ => throw("Invalid computeSpotPrice result for " + _amm.toString())
  }

  let imbalanceDeltaInUSD = muld(imbalanceDeltaInAmmDecimals, price)
  
  # Now compute a total value of assets in vault
  #
  let freeBalanceInAmmDecimal = getFreeBalance(_vault) / 100
  let vaultBalanceInUSD = muld(freeBalanceInAmmDecimal, price)

  (imbalanceDeltaInUSD, vaultBalanceInUSD)
}

func estimateSwap(
  _amount: Int,
  _assetId: String,
  _targetAsset: String
) = {
  let sourceDecimals = if (_assetId == "WAVES") then 8 else assetInfo(fromBase58String(_assetId)).valueOrErrorMessage("Invalid asset: " + _assetId).decimals
  let targetDecimals = if (_targetAsset == "WAVES") then 8 else assetInfo(fromBase58String(_targetAsset)).valueOrErrorMessage("Invalid asset: " + _targetAsset).decimals
  let sourceAmountInAmmDecimals = if (sourceDecimals == 8) then _amount / 100 else if (sourceDecimals == 6) then _amount else throw("Invalid decimals (source)")

  # 1. Find market for source asset
  let sellMarket = getMarket(_assetId)

  # 2. Sell it for USD
  strict s1 = invoke(sellMarket, "swapToQuote", [sourceAmountInAmmDecimals, 0], [])
  let usdAmount = match (s1) {
    case t: Int => t
    case _ => throw("Invalid swapToQuote result")
  }

  # 3. Find market for target asset
  let buyMarket = getMarket(_targetAsset)

  # 4. Buy it for USD
  strict s2 = invoke(buyMarket, "swapToBase", [usdAmount, 0], [])
  let targetAmount = match (s2) {
    case t: Int => if (targetDecimals == 8) then t * 100 else if (targetDecimals == 6) then t else throw("Invalid decimals (target)")
    case _ => throw("Invalid swapToBase result")
  }

  # 5. Get the imbalance for source asset addition
  let vaultToAdd = getVault(_assetId)
  let (addImbalanceUSD   , addVaultBalanceUSD)    = getImbalanceCostUSD(vaultToAdd, sellMarket, sourceDecimals, _amount)

  # 6. Get the fee for target asset depletion
  let vaultToRemove = getVault(_targetAsset)
  let (removeImbalanceUSD, removeVaultBalanceUSD) = getImbalanceCostUSD(vaultToRemove, buyMarket, targetDecimals, -targetAmount)

  # 7. Compute the fee (if overall imbalance improves - rebate the fee, otherwise increase the fee)
  let resultImbalanceInUSD = addImbalanceUSD + removeImbalanceUSD
  let baseFee = fee()
  let (actualFee, rebate, tax) = if (resultImbalanceInUSD < 0) then {
      let mostLiquid = vmax(addVaultBalanceUSD, removeVaultBalanceUSD)
      let rebateRate = divd(abs(resultImbalanceInUSD), mostLiquid)
      let rebate     = feeRebate().muld(rebateRate)
      let actualFee  = if (rebate > baseFee) then 0 else baseFee - rebate

      (actualFee, rebate, 0)
  } else {
    let leastLiquid = vmin(addVaultBalanceUSD, removeVaultBalanceUSD)
    let taxRate     = divd(abs(resultImbalanceInUSD), leastLiquid)
    let tax         = feeRebate().muld(taxRate)
    let actualFee   = baseFee + tax

    (actualFee, 0, tax)
  }

  let feeInTargetToken = muld(targetAmount, actualFee)
  let resultTargetAssetAmount = targetAmount - feeInTargetToken

  (
    targetAmount, 
    feeInTargetToken, 
    resultTargetAssetAmount, 
    baseFee, 
    actualFee, 
    rebate, 
    tax, 
    vaultToRemove, 
    vaultToAdd,
    addImbalanceUSD, 
    addVaultBalanceUSD,
    removeImbalanceUSD,
    removeVaultBalanceUSD
  )
}

# Checks if AMM was properly initialized
#
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

##### Update functions #####
func updateSettings(
  _fee: Int,
  _rebate: Int
) = {
  [
    IntegerEntry(k_fee, _fee),
    IntegerEntry(k_rebate, _rebate)
  ]
}

##### Callable functions #####

# Pauses the contract. During the pause, no actions can be taken except for unpausing the contract. 
# The purpose of pausing the contract may be to perform maintenance work or to immediately stop the market.
#
# @notice admin only
@Callable(i)
func pause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid pause params")
  } else {
    [
      BooleanEntry(k_paused, true)
    ]
  }
}

# Unpauses contract.
#
# @notice admin only
@Callable(i)
func unpause() = {
  if (i.caller != adminAddress()) then {
    throw("Invalid unpause params")
  } else {
    [
      BooleanEntry(k_paused, false)
    ]
  }
}

# Changes the settings of the contract.
#
# @param _fee The fee for the contract.
#
# @notice admin only
@Callable(i)
func changeSettings(
  _fee: Int,
  _rebate: Int
) = {
  if (
    _fee <= 0
    || _rebate <= 0
    || !initialized()
    || i.caller != adminAddress()
  ) then {
    throw("Invalid changeSettings params")
  } else {
    updateSettings(
      _fee,
      _rebate
    )
  }
}

@Callable(i)
func addAmm(
  _ammAddress: String,
  _vaultAddress: String,
  _vaultAsset: String,
  _data: String
) = isAdmin(i).valueOrElse({
  strict ammAddress = getAddressIfValid(_ammAddress)
  strict vaultAddress = getAddressIfValid(_vaultAddress)

  [
    BooleanEntry(k_amm.toCompositeKey(_ammAddress), true),
    BooleanEntry(k_vault.toCompositeKey(_vaultAddress), true),
    StringEntry(k_asset_vault.toCompositeKey(_vaultAsset), _vaultAddress),
    StringEntry(k_asset_amm.toCompositeKey(_vaultAsset), _ammAddress),
    StringEntry(k_amm_data.toCompositeKey(_ammAddress), _data)
  ]
})

@Callable(i)
func removeAmm(
  _ammAddress: String
) = isAdmin(i).valueOrElse({
  [
    DeleteEntry(k_amm.toCompositeKey(_ammAddress))
  ]
})

@Callable(i)
func initialize(
  _coordinator: String,
  _fee: Int,
  _rebate: Int
) = {
  if (
    _fee <= 0
    || _rebate <= 0
    || initialized()
    || i.caller != this
  ) then {
    throw("Invalid initialize parameters")
  } else {
    updateSettings( 
      _fee,
      _rebate
    )
    ++
    [
      BooleanEntry(k_initialized, true),
      StringEntry(k_coordinatorAddress, addressFromStringValue(_coordinator).toString())
    ]
  }
}

@Callable(i)
func swap(
  _targetAsset: String,
  _minTargetAmount: Int
) = {
  let _amount = i.payments[0].amount
  let _assetId = i.payments[0].assetId

  let assetId = if (_assetId.isDefined()) then _assetId.value().toBase58String() else "WAVES"

  strict (
    targetAmount, 
    feeInTargetToken,
    resultTargetAssetAmount,
    baseFee, 
    actualFee, 
    rebate, 
    tax, 
    vaultToRemove, 
    vaultToAdd
  ) = estimateSwap(_amount, assetId, _targetAsset)
  
  # 8. Withdraw full amount of tokens to withdraw and deposit full amount of tokens to deposit
  #
  strict doWithdraw = invoke(vaultToRemove, "borrow", [targetAmount], [])
  strict doDeposit  = invoke(vaultToAdd   , "repay" , []            , [i.payments[0]])

  # 9. Distribute fee to LP, basically remove fee back, but it belongs to LP now
  let targetAsset = if (_targetAsset == "WAVES") then unit else fromBase58String(_targetAsset)
  strict doCollectFee = invoke(vaultToRemove, "addFree", [], [
    AttachedPayment(targetAsset, feeInTargetToken)
  ])
  
  # 9. Distribute fee to TSN holders
  # TBD
  
  # 10. Finish swap, but check slippage first
  #
  if (_minTargetAmount > 0 && resultTargetAssetAmount < _minTargetAmount) then {
    throw("Can not swap due to slippage: " + resultTargetAssetAmount.toString() + " < " + _minTargetAmount.toString())
  } else {
    ([
      ScriptTransfer(i.caller, (targetAmount - feeInTargetToken), targetAsset)
    ], (_amount, resultTargetAssetAmount, baseFee, actualFee, rebate, tax))
  }
}

@Callable(i)
func view_estimateSwap(
  _sourceAmount: Int,
  _sourceAsset: String,
  _targetAsset: String
) = {
  strict (
    targetAmount, 
    feeInTargetToken,
    resultTargetAssetAmount,
    baseFee, 
    actualFee, 
    rebate, 
    tax, 
    vaultToRemove, 
    vaultToAdd,
    addImbalanceUSD, 
    addVaultBalanceUSD,
    removeImbalanceUSD,
    removeVaultBalanceUSD
  ) = estimateSwap(_sourceAmount, _sourceAsset, _targetAsset)
  
  let data = [
    targetAmount.toString(),
    feeInTargetToken.toString(),
    resultTargetAssetAmount.toString(),
    baseFee.toString(),
    actualFee.toString(),
    rebate.toString(),
    tax.toString(),
    addImbalanceUSD.toString(),
    addVaultBalanceUSD.toString(),
    removeImbalanceUSD.toString(),
    removeVaultBalanceUSD.toString()
  ].makeString(",")

  throw(data)
}

@Verifier(tx)
func verify() = { 
  let coordinatorStr = this.getString(k_coordinatorAddress)
  if (coordinatorStr.isDefined()) then {
    let admin = addressFromStringValue(coordinatorStr.value()).getString(k_admin_address)
    if (admin.isDefined()) then {
      admin.value().addressFromStringValue().getBoolean("status_" + this.toString() + "_" + tx.id.toBase58String() ).valueOrElse(false)
    } else { 
      # Admin is not defined in coordinator, set admin first
      throw("unable to verify: admin not set in coordinator")
    }
  } else {
    # Coordinator not set, use native verify
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  }
}